#![feature(prelude_import)]
#![deny(missing_debug_implementations, nonstandard_style)]
#![warn(unreachable_pub, rust_2018_idioms)]
//! A high level abstraction layer for interfacing with NAO V6 robots.
//!
//! ## About
//!
//! ## Backends
//! nidhogg works by connecting to a backend that implements the [`NaoBackend`] trait.
//!
//! Backends can be enabled with features, by default the `lola` feature is enabled.
//!
//! | Backend | Supported | Feature name |
//! |-|-|-|
//! | `LoLA` | ‚úÖ | `lola` |
//! | `CoppeliaSim` | üöß | `coppelia` |
//!
//! ‚úÖ: Fully supported!
//! üöß: Work in progress
//!
//! # Example
//! ```no_run
//! use nidhogg::{
//!     backend::LolaBackend,
//!     NaoBackend,
//! };
//!
//! // We use the LoLA backend to connect to a LoLA socket on a real NAO V6.
//! let mut nao = LolaBackend::connect().unwrap();
//!
//! // We can now get the current state of the robot!
//! let state = nao.read_nao_state().expect("Failed to retrieve sensor data!");
//! ```
//!
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod backend {
    //! # Supported NAO backends
    //!
    //! This module provides support for various NAO backends.
    //! It also includes several traits that enhance the functionality of types that implement [`NaoBackend`].
    #[cfg(feature = "lola")]
    mod lola {
        //! `LoLA` backend that communicates through the socket at `/tmp/robocup`.
        //!
        use crate::{
            types::{
                Battery, Color, ForceSensitiveResistorFoot, ForceSensitiveResistors,
                JointArray, LeftEar, LeftEye, RightEar, RightEye, Skull, SonarEnabled,
                SonarValues, Touch, Vector2, Vector3,
            },
            Error, HardwareInfo, NaoBackend, NaoControlMessage, NaoState, Result,
        };
        use std::{
            io::{BufWriter, Read},
            os::unix::net::UnixStream,
        };
        use rmp_serde::{encode, from_slice};
        use serde::{Deserialize, Serialize};
        use super::{ConnectWithRetry, ReadHardwareInfo};
        const ROBOCUP_SOCKET_PATH: &str = "/tmp/robocup";
        const LOLA_BUFFER_SIZE: usize = 896;
        /// `LoLA` backend that communicates with a real NAO V6 through the socket at `/tmp/robocup`
        pub struct LolaBackend(UnixStream);
        #[automatically_derived]
        impl ::core::fmt::Debug for LolaBackend {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "LolaBackend",
                    &&self.0,
                )
            }
        }
        impl NaoBackend for LolaBackend {
            /// Connects to a NAO backend
            ///
            /// # Examples
            /// ```no_run
            /// use nidhogg::{NaoBackend, backend::LolaBackend};
            ///
            /// // We connect to a real NAO using the `LoLA` backend
            /// let mut nao = LolaBackend::connect().expect("Could not connect to the NAO! üò™");
            /// ```
            fn connect() -> Result<Self> {
                let stream = UnixStream::connect(ROBOCUP_SOCKET_PATH)
                    .map_err(Error::NoLoLAConnection)?;
                Ok(LolaBackend(stream))
            }
            /// Converts a control message to the format required by the backend and writes it to that backend.
            ///
            /// # Examples
            /// ```no_run
            /// use nidhogg::{NaoBackend, NaoControlMessage, backend::LolaBackend, types::Color};
            ///
            /// let mut nao = LolaBackend::connect().unwrap();
            ///
            /// // First, create a new control message where we set the chest color
            /// let msg = NaoControlMessage::builder().chest(Color::MAGENTA).build();
            ///
            /// // Now we send it to the NAO!
            /// nao.send_control_msg(msg).expect("Failed to write control message to backend!");
            /// ```
            fn send_control_msg(
                &mut self,
                control_msg: NaoControlMessage,
            ) -> Result<()> {
                let raw: LolaControlMsg = control_msg.into();
                let mut buf = BufWriter::new(&mut self.0);
                encode::write_named(&mut buf, &raw).map_err(Error::MsgPackEncodeError)
            }
            /// Reads the current sensor data from the chosen backend
            ///
            /// # Examples
            /// ```no_run
            /// use nidhogg::{NaoBackend, backend::LolaBackend};
            ///
            /// let mut nao = LolaBackend::connect().unwrap();
            ///
            /// // Get the current state of the robot
            /// let state = nao.read_nao_state().expect("Failed to retrieve sensor data!");
            /// ```
            fn read_nao_state(&mut self) -> Result<NaoState> {
                let mut buf = [0; LOLA_BUFFER_SIZE];
                Ok(self.read_lola_nao_state(&mut buf)?.into())
            }
        }
        impl ConnectWithRetry for LolaBackend {}
        impl ReadHardwareInfo for LolaBackend {
            fn read_hardware_info(&mut self) -> Result<HardwareInfo> {
                let mut buf = [0; LOLA_BUFFER_SIZE];
                self.read_lola_nao_state(&mut buf).map(LolaNaoState::into)
            }
        }
        impl LolaBackend {
            /// Read a [`LolaNaoState`] from the `LoLA` socket.
            fn read_lola_nao_state<'a>(
                &mut self,
                buf: &'a mut [u8; LOLA_BUFFER_SIZE],
            ) -> Result<LolaNaoState<'a>> {
                self.0.read_exact(buf)?;
                from_slice::<LolaNaoState<'_>>(buf).map_err(Error::MsgPackDecodeError)
            }
        }
        /// A trait that provides conversions from nidhogg data to `LoLA` data
        ///
        /// ## üóíÔ∏è Note:
        /// Like [`From`] does with [`Into`], this trait automatically provides an implementation for [`IntoLoLA`].
        trait FromNidhogg<N> {
            fn from_nidhogg(value: N) -> Self;
        }
        /// A trait that provides conversions from `nihogg` data to `LoLA` data
        ///
        /// ## ‚ö†Ô∏è Warning:
        trait IntoLoLA<L> {
            fn into_lola(self) -> L;
        }
        /// From<T> for U implies Into<U> for T
        /// See: <https://doc.rust-lang.org/std/convert/trait.From.html>
        impl<N, L: FromNidhogg<N>> IntoLoLA<L> for N {
            fn into_lola(self) -> L {
                L::from_nidhogg(self)
            }
        }
        /// A trait that provides conversions from `LoLA` data to nidhogg data
        ///
        /// ## üóíÔ∏è Note:
        /// Like [`From`] does with [`Into`], this trait automatically provides an implementation for [`IntoLoLA`].
        trait FromLoLA<L> {
            fn from_lola(value: L) -> Self;
        }
        /// A trait that provides conversions from `LoLA` data to nidhogg data
        ///
        /// ## ‚ö†Ô∏è Warning:
        trait IntoNidhogg<N> {
            fn into_nidhogg(self) -> N;
        }
        /// From<T> for U implies Into<U> for T
        /// See: <https://doc.rust-lang.org/std/convert/trait.From.html>
        impl<L, N: FromLoLA<L>> IntoNidhogg<N> for L {
            fn into_nidhogg(self) -> N {
                N::from_lola(self)
            }
        }
        impl FromNidhogg<LeftEar> for [f32; 10] {
            fn from_nidhogg(value: LeftEar) -> Self {
                [
                    value.intensity_0_deg,
                    value.intensity_36_deg,
                    value.intensity_72_deg,
                    value.intensity_108_deg,
                    value.intensity_144_deg,
                    value.intensity_180_deg,
                    value.intensity_216_deg,
                    value.intensity_252_deg,
                    value.intensity_288_deg,
                    value.intensity_324_deg,
                ]
            }
        }
        impl FromNidhogg<RightEar> for [f32; 10] {
            fn from_nidhogg(value: RightEar) -> Self {
                [
                    value.intensity_324_deg,
                    value.intensity_288_deg,
                    value.intensity_252_deg,
                    value.intensity_216_deg,
                    value.intensity_180_deg,
                    value.intensity_144_deg,
                    value.intensity_108_deg,
                    value.intensity_72_deg,
                    value.intensity_36_deg,
                    value.intensity_0_deg,
                ]
            }
        }
        impl FromNidhogg<Color> for [f32; 3] {
            fn from_nidhogg(value: Color) -> Self {
                [value.red, value.green, value.blue]
            }
        }
        impl FromNidhogg<LeftEye> for [f32; 24] {
            fn from_nidhogg(value: LeftEye) -> Self {
                [
                    value.color_45_deg.red,
                    value.color_0_deg.red,
                    value.color_315_deg.red,
                    value.color_270_deg.red,
                    value.color_225_deg.red,
                    value.color_180_deg.red,
                    value.color_135_deg.red,
                    value.color_90_deg.red,
                    value.color_45_deg.green,
                    value.color_0_deg.green,
                    value.color_315_deg.green,
                    value.color_270_deg.green,
                    value.color_225_deg.green,
                    value.color_180_deg.green,
                    value.color_135_deg.green,
                    value.color_90_deg.green,
                    value.color_45_deg.blue,
                    value.color_0_deg.blue,
                    value.color_315_deg.blue,
                    value.color_270_deg.blue,
                    value.color_225_deg.blue,
                    value.color_180_deg.blue,
                    value.color_135_deg.blue,
                    value.color_90_deg.blue,
                ]
            }
        }
        impl FromNidhogg<RightEye> for [f32; 24] {
            fn from_nidhogg(value: RightEye) -> Self {
                [
                    value.color_0_deg.red,
                    value.color_45_deg.red,
                    value.color_90_deg.red,
                    value.color_135_deg.red,
                    value.color_180_deg.red,
                    value.color_225_deg.red,
                    value.color_270_deg.red,
                    value.color_315_deg.red,
                    value.color_0_deg.green,
                    value.color_45_deg.green,
                    value.color_90_deg.green,
                    value.color_135_deg.green,
                    value.color_180_deg.green,
                    value.color_225_deg.green,
                    value.color_270_deg.green,
                    value.color_315_deg.green,
                    value.color_0_deg.blue,
                    value.color_45_deg.blue,
                    value.color_90_deg.blue,
                    value.color_135_deg.blue,
                    value.color_180_deg.blue,
                    value.color_225_deg.blue,
                    value.color_270_deg.blue,
                    value.color_315_deg.blue,
                ]
            }
        }
        impl FromNidhogg<Skull> for [f32; 12] {
            fn from_nidhogg(value: Skull) -> Self {
                [
                    value.left_front_0,
                    value.left_front_1,
                    value.left_middle_0,
                    value.left_rear_0,
                    value.left_rear_1,
                    value.left_rear_2,
                    value.right_rear_2,
                    value.right_rear_1,
                    value.right_rear_0,
                    value.right_middle_0,
                    value.right_front_0,
                    value.right_front_1,
                ]
            }
        }
        impl<T> FromLoLA<[T; 25]> for JointArray<T> {
            fn from_lola(value: [T; 25]) -> Self {
                let [head_yaw, head_pitch, left_shoulder_pitch, left_shoulder_roll,
                left_elbow_yaw, left_elbow_roll, left_wrist_yaw, left_hip_yaw_pitch,
                left_hip_roll, left_hip_pitch, left_knee_pitch, left_ankle_pitch,
                left_ankle_roll, right_hip_roll, right_hip_pitch, right_knee_pitch,
                right_ankle_pitch, right_ankle_roll, right_shoulder_pitch,
                right_shoulder_roll, right_elbow_yaw, right_elbow_roll, right_wrist_yaw,
                left_hand, right_hand] = value;
                Self {
                    head_yaw,
                    head_pitch,
                    left_shoulder_pitch,
                    left_shoulder_roll,
                    left_elbow_yaw,
                    left_elbow_roll,
                    left_wrist_yaw,
                    left_hip_yaw_pitch,
                    left_hip_roll,
                    left_hip_pitch,
                    left_knee_pitch,
                    left_ankle_pitch,
                    left_ankle_roll,
                    right_shoulder_pitch,
                    right_shoulder_roll,
                    right_elbow_yaw,
                    right_elbow_roll,
                    right_wrist_yaw,
                    right_hip_roll,
                    right_hip_pitch,
                    right_knee_pitch,
                    right_ankle_pitch,
                    right_ankle_roll,
                    left_hand,
                    right_hand,
                }
            }
        }
        impl<T> FromNidhogg<JointArray<T>> for [T; 25] {
            fn from_nidhogg(value: JointArray<T>) -> Self {
                [
                    value.head_yaw,
                    value.head_pitch,
                    value.left_shoulder_pitch,
                    value.left_shoulder_roll,
                    value.left_elbow_yaw,
                    value.left_elbow_roll,
                    value.left_wrist_yaw,
                    value.left_hip_yaw_pitch,
                    value.left_hip_roll,
                    value.left_hip_pitch,
                    value.left_knee_pitch,
                    value.left_ankle_pitch,
                    value.left_ankle_roll,
                    value.right_hip_roll,
                    value.right_hip_pitch,
                    value.right_knee_pitch,
                    value.right_ankle_pitch,
                    value.right_ankle_roll,
                    value.right_shoulder_pitch,
                    value.right_shoulder_roll,
                    value.right_elbow_yaw,
                    value.right_elbow_roll,
                    value.right_wrist_yaw,
                    value.left_hand,
                    value.right_hand,
                ]
            }
        }
        impl FromLoLA<[f32; 4]> for Battery {
            fn from_lola(value: [f32; 4]) -> Self {
                Battery {
                    charge: value[0],
                    current: value[1],
                    status: value[2],
                    temperature: value[3],
                }
            }
        }
        impl FromLoLA<[f32; 8]> for ForceSensitiveResistors {
            fn from_lola(value: [f32; 8]) -> Self {
                let left: [f32; 4] = value[..4].try_into().unwrap();
                let right: [f32; 4] = value[4..].try_into().unwrap();
                Self {
                    left_foot: left.into_nidhogg(),
                    right_foot: right.into_nidhogg(),
                }
            }
        }
        impl FromLoLA<[f32; 4]> for ForceSensitiveResistorFoot {
            fn from_lola(value: [f32; 4]) -> Self {
                Self {
                    front_left: value[0],
                    front_right: value[1],
                    rear_left: value[2],
                    rear_right: value[3],
                }
            }
        }
        impl FromLoLA<[f32; 2]> for SonarValues {
            fn from_lola(value: [f32; 2]) -> Self {
                let [left, right] = value;
                SonarValues { left, right }
            }
        }
        impl FromNidhogg<SonarValues> for [f32; 2] {
            fn from_nidhogg(value: SonarValues) -> Self {
                [value.left, value.right]
            }
        }
        impl FromLoLA<[bool; 2]> for SonarEnabled {
            fn from_lola(value: [bool; 2]) -> Self {
                let [left, right] = value;
                SonarEnabled { left, right }
            }
        }
        impl FromNidhogg<SonarEnabled> for [bool; 2] {
            fn from_nidhogg(value: SonarEnabled) -> Self {
                [value.left, value.right]
            }
        }
        impl FromLoLA<[f32; 14]> for Touch {
            fn from_lola(value: [f32; 14]) -> Self {
                Self {
                    chest_board: value[0],
                    head_front: value[1],
                    head_middle: value[2],
                    head_rear: value[3],
                    left_foot_left: value[4],
                    left_foot_right: value[5],
                    left_hand_back: value[6],
                    left_hand_left: value[7],
                    left_hand_right: value[8],
                    right_foot_left: value[9],
                    right_foot_right: value[10],
                    right_hand_back: value[11],
                    right_hand_left: value[12],
                    right_hand_right: value[13],
                }
            }
        }
        impl FromLoLA<[f32; 2]> for Vector2<f32> {
            fn from_lola(value: [f32; 2]) -> Self {
                Vector2 {
                    x: value[0],
                    y: value[1],
                }
            }
        }
        impl FromLoLA<[f32; 3]> for Vector3<f32> {
            fn from_lola(value: [f32; 3]) -> Self {
                Vector3 {
                    x: value[0],
                    y: value[1],
                    z: value[2],
                }
            }
        }
        #[serde(rename_all = "PascalCase")]
        struct LolaNaoState<'a> {
            stiffness: [f32; 25],
            position: [f32; 25],
            temperature: [f32; 25],
            current: [f32; 25],
            battery: [f32; 4],
            accelerometer: [f32; 3],
            gyroscope: [f32; 3],
            angles: [f32; 2],
            sonar: [f32; 2],
            f_s_r: [f32; 8],
            touch: [f32; 14],
            status: [i32; 25],
            #[serde(borrow)]
            robot_config: [&'a str; 4],
        }
        #[automatically_derived]
        impl<'a> ::core::fmt::Debug for LolaNaoState<'a> {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "stiffness",
                    "position",
                    "temperature",
                    "current",
                    "battery",
                    "accelerometer",
                    "gyroscope",
                    "angles",
                    "sonar",
                    "f_s_r",
                    "touch",
                    "status",
                    "robot_config",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.stiffness,
                    &self.position,
                    &self.temperature,
                    &self.current,
                    &self.battery,
                    &self.accelerometer,
                    &self.gyroscope,
                    &self.angles,
                    &self.sonar,
                    &self.f_s_r,
                    &self.touch,
                    &self.status,
                    &&self.robot_config,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "LolaNaoState",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de: 'a, 'a> _serde::Deserialize<'de> for LolaNaoState<'a> {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                12u64 => _serde::__private::Ok(__Field::__field12),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Stiffness" => _serde::__private::Ok(__Field::__field0),
                                "Position" => _serde::__private::Ok(__Field::__field1),
                                "Temperature" => _serde::__private::Ok(__Field::__field2),
                                "Current" => _serde::__private::Ok(__Field::__field3),
                                "Battery" => _serde::__private::Ok(__Field::__field4),
                                "Accelerometer" => _serde::__private::Ok(__Field::__field5),
                                "Gyroscope" => _serde::__private::Ok(__Field::__field6),
                                "Angles" => _serde::__private::Ok(__Field::__field7),
                                "Sonar" => _serde::__private::Ok(__Field::__field8),
                                "FSR" => _serde::__private::Ok(__Field::__field9),
                                "Touch" => _serde::__private::Ok(__Field::__field10),
                                "Status" => _serde::__private::Ok(__Field::__field11),
                                "RobotConfig" => _serde::__private::Ok(__Field::__field12),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Stiffness" => _serde::__private::Ok(__Field::__field0),
                                b"Position" => _serde::__private::Ok(__Field::__field1),
                                b"Temperature" => _serde::__private::Ok(__Field::__field2),
                                b"Current" => _serde::__private::Ok(__Field::__field3),
                                b"Battery" => _serde::__private::Ok(__Field::__field4),
                                b"Accelerometer" => _serde::__private::Ok(__Field::__field5),
                                b"Gyroscope" => _serde::__private::Ok(__Field::__field6),
                                b"Angles" => _serde::__private::Ok(__Field::__field7),
                                b"Sonar" => _serde::__private::Ok(__Field::__field8),
                                b"FSR" => _serde::__private::Ok(__Field::__field9),
                                b"Touch" => _serde::__private::Ok(__Field::__field10),
                                b"Status" => _serde::__private::Ok(__Field::__field11),
                                b"RobotConfig" => _serde::__private::Ok(__Field::__field12),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de: 'a, 'a> {
                        marker: _serde::__private::PhantomData<LolaNaoState<'a>>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de: 'a, 'a> _serde::de::Visitor<'de> for __Visitor<'de, 'a> {
                        type Value = LolaNaoState<'a>;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct LolaNaoState",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 25],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 25],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 25],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 25],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 4],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 3],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 3],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 2],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 2],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 8],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match match _serde::de::SeqAccess::next_element::<
                                [f32; 14],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match match _serde::de::SeqAccess::next_element::<
                                [i32; 25],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            let __field12 = match match _serde::de::SeqAccess::next_element::<
                                [&'a str; 4],
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            12usize,
                                            &"struct LolaNaoState with 13 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(LolaNaoState {
                                stiffness: __field0,
                                position: __field1,
                                temperature: __field2,
                                current: __field3,
                                battery: __field4,
                                accelerometer: __field5,
                                gyroscope: __field6,
                                angles: __field7,
                                sonar: __field8,
                                f_s_r: __field9,
                                touch: __field10,
                                status: __field11,
                                robot_config: __field12,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<[f32; 25]> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<[f32; 25]> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<[f32; 25]> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<[f32; 25]> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<[f32; 4]> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<[f32; 3]> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<[f32; 3]> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<[f32; 2]> = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<[f32; 2]> = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<[f32; 8]> = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<[f32; 14]> = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<[i32; 25]> = _serde::__private::None;
                            let mut __field12: _serde::__private::Option<[&'a str; 4]> = _serde::__private::None;
                            while let _serde::__private::Some(__key)
                                = match _serde::de::MapAccess::next_key::<
                                    __Field,
                                >(&mut __map) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Stiffness",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 25],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Position",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 25],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Temperature",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 25],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Current",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 25],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Battery",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 4],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Accelerometer",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 3],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Gyroscope",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 3],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Angles"),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 2],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Sonar"),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 2],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("FSR"),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 8],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Touch"),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [f32; 14],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Status"),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [i32; 25],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field12 => {
                                        if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "RobotConfig",
                                                ),
                                            );
                                        }
                                        __field12 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                [&'a str; 4],
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    _ => {
                                        let _ = match _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        };
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Stiffness") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Position") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Temperature") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Current") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Battery") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "Accelerometer",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Gyroscope") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Angles") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Sonar") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("FSR") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Touch") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("Status") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field12 = match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("RobotConfig") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            _serde::__private::Ok(LolaNaoState {
                                stiffness: __field0,
                                position: __field1,
                                temperature: __field2,
                                current: __field3,
                                battery: __field4,
                                accelerometer: __field5,
                                gyroscope: __field6,
                                angles: __field7,
                                sonar: __field8,
                                f_s_r: __field9,
                                touch: __field10,
                                status: __field11,
                                robot_config: __field12,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Stiffness",
                        "Position",
                        "Temperature",
                        "Current",
                        "Battery",
                        "Accelerometer",
                        "Gyroscope",
                        "Angles",
                        "Sonar",
                        "FSR",
                        "Touch",
                        "Status",
                        "RobotConfig",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "LolaNaoState",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<LolaNaoState<'a>>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        impl From<LolaNaoState<'_>> for NaoState {
            fn from(value: LolaNaoState<'_>) -> Self {
                Self {
                    stiffness: value.stiffness.into_nidhogg(),
                    position: value.position.into_nidhogg(),
                    temperature: value.temperature.into_nidhogg(),
                    current: value.current.into_nidhogg(),
                    battery: value.battery.into_nidhogg(),
                    accelerometer: value.accelerometer.into_nidhogg(),
                    gyroscope: value.gyroscope.into_nidhogg(),
                    angles: value.angles.into_nidhogg(),
                    sonar: value.sonar.into_nidhogg(),
                    force_sensitive_resistors: value.f_s_r.into_nidhogg(),
                    touch: value.touch.into_nidhogg(),
                    status: value.status.into_nidhogg(),
                }
            }
        }
        impl From<LolaNaoState<'_>> for HardwareInfo {
            fn from(value: LolaNaoState<'_>) -> Self {
                Self {
                    body_id: value.robot_config[0].to_string(),
                    body_version: value.robot_config[1].to_string(),
                    head_id: value.robot_config[2].to_string(),
                    head_version: value.robot_config[3].to_string(),
                }
            }
        }
        #[serde(rename_all = "PascalCase")]
        struct LolaControlMsg {
            position: [f32; 25],
            stiffness: [f32; 25],
            r_ear: [f32; 10],
            l_ear: [f32; 10],
            chest: [f32; 3],
            l_eye: [f32; 24],
            r_eye: [f32; 24],
            l_foot: [f32; 3],
            r_foot: [f32; 3],
            skull: [f32; 12],
            sonar: [bool; 2],
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for LolaControlMsg {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "position",
                    "stiffness",
                    "r_ear",
                    "l_ear",
                    "chest",
                    "l_eye",
                    "r_eye",
                    "l_foot",
                    "r_foot",
                    "skull",
                    "sonar",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.position,
                    &self.stiffness,
                    &self.r_ear,
                    &self.l_ear,
                    &self.chest,
                    &self.l_eye,
                    &self.r_eye,
                    &self.l_foot,
                    &self.r_foot,
                    &self.skull,
                    &&self.sonar,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "LolaControlMsg",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for LolaControlMsg {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = match _serde::Serializer::serialize_struct(
                        __serializer,
                        "LolaControlMsg",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Position",
                        &self.position,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Stiffness",
                        &self.stiffness,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "REar",
                        &self.r_ear,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "LEar",
                        &self.l_ear,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Chest",
                        &self.chest,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "LEye",
                        &self.l_eye,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "REye",
                        &self.r_eye,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "LFoot",
                        &self.l_foot,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "RFoot",
                        &self.r_foot,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Skull",
                        &self.skull,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Sonar",
                        &self.sonar,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        impl From<NaoControlMessage> for LolaControlMsg {
            fn from(value: NaoControlMessage) -> Self {
                Self {
                    position: value.position.into_lola(),
                    stiffness: value.stiffness.into_lola(),
                    r_ear: value.right_ear.into_lola(),
                    l_ear: value.left_ear.into_lola(),
                    chest: value.chest.into_lola(),
                    l_eye: value.left_eye.into_lola(),
                    r_eye: value.right_eye.into_lola(),
                    l_foot: value.left_foot.into_lola(),
                    r_foot: value.right_foot.into_lola(),
                    skull: value.skull.into_lola(),
                    sonar: value.sonar.into_lola(),
                }
            }
        }
    }
    #[cfg(feature = "lola")]
    pub use lola::LolaBackend;
    use std::any::type_name;
    use std::thread;
    use std::time::Duration;
    use tracing::info;
    use crate::error::Result;
    use crate::{HardwareInfo, NaoBackend};
    /// Trait that introduces [`ConnectWithRetry::connect_with_retry`] to a type that implements [`NaoBackend`].
    pub trait ConnectWithRetry: NaoBackend {
        /// Connects to a NAO by trying multiple times with an interval in between.
        ///
        /// # Examples
        /// ```no_run
        /// use nidhogg::{NaoBackend, backend::{LolaBackend, ConnectWithRetry}};
        /// use std::time::Duration;
        ///
        /// // Try to connect, potentially retrying 10 times, with a 1 second interval
        /// let mut nao = LolaBackend::connect_with_retry(10, Duration::from_secs(1))
        ///     .expect("Could not connect to the NAO! üò™");
        /// ```
        fn connect_with_retry(
            retry_count: u32,
            retry_interval: Duration,
        ) -> Result<Self> {
            for i in 0..=retry_count {
                {
                    use ::tracing::__macro_support::Callsite as _;
                    static CALLSITE: ::tracing::callsite::DefaultCallsite = {
                        static META: ::tracing::Metadata<'static> = {
                            ::tracing_core::metadata::Metadata::new(
                                "event nidhogg/src/backend/mod.rs:42",
                                "nidhogg::backend",
                                ::tracing::Level::INFO,
                                Some("nidhogg/src/backend/mod.rs"),
                                Some(42u32),
                                Some("nidhogg::backend"),
                                ::tracing_core::field::FieldSet::new(
                                    &["message"],
                                    ::tracing_core::callsite::Identifier(&CALLSITE),
                                ),
                                ::tracing::metadata::Kind::EVENT,
                            )
                        };
                        ::tracing::callsite::DefaultCallsite::new(&META)
                    };
                    let enabled = ::tracing::Level::INFO
                        <= ::tracing::level_filters::STATIC_MAX_LEVEL
                        && ::tracing::Level::INFO
                            <= ::tracing::level_filters::LevelFilter::current()
                        && {
                            let interest = CALLSITE.interest();
                            !interest.is_never()
                                && ::tracing::__macro_support::__is_enabled(
                                    CALLSITE.metadata(),
                                    interest,
                                )
                        };
                    if enabled {
                        (|value_set: ::tracing::field::ValueSet| {
                            let meta = CALLSITE.metadata();
                            ::tracing::Event::dispatch(meta, &value_set);
                        })({
                            #[allow(unused_imports)]
                            use ::tracing::field::{debug, display, Value};
                            let mut iter = CALLSITE.metadata().fields().iter();
                            CALLSITE
                                .metadata()
                                .fields()
                                .value_set(
                                    &[
                                        (
                                            &iter.next().expect("FieldSet corrupted (this is a bug)"),
                                            Some(
                                                &format_args!(
                                                    "[{0}/{1}] Connecting to {2}",
                                                    i + 1,
                                                    retry_count + 1,
                                                    type_name::<Self>(),
                                                ) as &dyn Value,
                                            ),
                                        ),
                                    ],
                                )
                        });
                    } else {
                    }
                };
                let maybe_backend = Self::connect();
                if maybe_backend.is_ok() || i == retry_count {
                    return maybe_backend;
                }
                thread::sleep(retry_interval);
            }
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    /// Trait that introduces [`ReadHardwareInfo::read_hardware_info`] to a type that implements [`NaoBackend`].
    pub trait ReadHardwareInfo: NaoBackend {
        /// Reads the [`HardwareInfo`] of the NAO.
        ///
        /// The hardware info includes serial numbers and versions of the physical parts, which can be useful for finding out which robot you're connected to!
        ///
        /// # Examples
        /// ```no_run
        /// use nidhogg::{NaoBackend, backend::{LolaBackend, ReadHardwareInfo}};
        /// use std::time::Duration;
        ///
        /// let mut nao = LolaBackend::connect().unwrap();
        ///
        /// nao.read_hardware_info().expect("Failed to get hardware info!");
        /// ```
        fn read_hardware_info(&mut self) -> Result<HardwareInfo>;
    }
}
mod error {
    use miette::Diagnostic;
    use thiserror::Error;
    pub type Result<T> = std::result::Result<T, Error>;
    #[non_exhaustive]
    pub enum Error {
        #[cfg(feature = "lola")]
        #[error("Could not connect to LoLA socket")]
        #[diagnostic(
            help(
                "- Are you trying to connect to the simulation? This backend only supports real NAOs!
- Are you running the code locally? Connecting with LoLA only works when ran on a NAO!
- Are you using `LoLABackend::connect_with_retry` instead of `LoLABackend::connect`? You might not always get a connection the first time!"
            )
        )]
        NoLoLAConnection(#[from] std::io::Error),
        #[cfg(feature = "lola")]
        #[error("Failed to decode MessagePack message")]
        MsgPackDecodeError(#[from] rmp_serde::decode::Error),
        #[cfg(feature = "lola")]
        #[error("Failed to encode MessagePack message")]
        MsgPackEncodeError(#[from] rmp_serde::encode::Error),
    }
    #[allow(unused_qualifications)]
    impl std::error::Error for Error {
        fn source(&self) -> std::option::Option<&(dyn std::error::Error + 'static)> {
            use thiserror::__private::AsDynError;
            #[allow(deprecated)]
            match self {
                Error::NoLoLAConnection { 0: source, .. } => {
                    std::option::Option::Some(source.as_dyn_error())
                }
                Error::MsgPackDecodeError { 0: source, .. } => {
                    std::option::Option::Some(source.as_dyn_error())
                }
                Error::MsgPackEncodeError { 0: source, .. } => {
                    std::option::Option::Some(source.as_dyn_error())
                }
            }
        }
    }
    #[allow(unused_qualifications)]
    impl std::fmt::Display for Error {
        fn fmt(&self, __formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
            #[allow(unused_variables, deprecated, clippy::used_underscore_binding)]
            match self {
                Error::NoLoLAConnection(_0) => {
                    __formatter
                        .write_fmt(format_args!("Could not connect to LoLA socket"))
                }
                Error::MsgPackDecodeError(_0) => {
                    __formatter
                        .write_fmt(format_args!("Failed to decode MessagePack message"))
                }
                Error::MsgPackEncodeError(_0) => {
                    __formatter
                        .write_fmt(format_args!("Failed to encode MessagePack message"))
                }
            }
        }
    }
    #[allow(unused_qualifications)]
    impl std::convert::From<std::io::Error> for Error {
        #[allow(deprecated)]
        fn from(source: std::io::Error) -> Self {
            Error::NoLoLAConnection {
                0: source,
            }
        }
    }
    #[allow(unused_qualifications)]
    impl std::convert::From<rmp_serde::decode::Error> for Error {
        #[allow(deprecated)]
        fn from(source: rmp_serde::decode::Error) -> Self {
            Error::MsgPackDecodeError {
                0: source,
            }
        }
    }
    #[allow(unused_qualifications)]
    impl std::convert::From<rmp_serde::encode::Error> for Error {
        #[allow(deprecated)]
        fn from(source: rmp_serde::encode::Error) -> Self {
            Error::MsgPackEncodeError {
                0: source,
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Error {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                Error::NoLoLAConnection(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "NoLoLAConnection",
                        &__self_0,
                    )
                }
                Error::MsgPackDecodeError(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "MsgPackDecodeError",
                        &__self_0,
                    )
                }
                Error::MsgPackEncodeError(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "MsgPackEncodeError",
                        &__self_0,
                    )
                }
            }
        }
    }
    impl miette::Diagnostic for Error {
        fn help(
            &self,
        ) -> std::option::Option<std::boxed::Box<dyn std::fmt::Display + '_>> {
            #[allow(unused_variables, deprecated)]
            match self {
                Self::NoLoLAConnection(_0) => {
                    std::option::Option::Some(
                        std::boxed::Box::new({
                            let res = ::alloc::fmt::format(
                                format_args!(
                                    "- Are you trying to connect to the simulation? This backend only supports real NAOs!\n- Are you running the code locally? Connecting with LoLA only works when ran on a NAO!\n- Are you using `LoLABackend::connect_with_retry` instead of `LoLABackend::connect`? You might not always get a connection the first time!",
                                ),
                            );
                            res
                        }),
                    )
                }
                _ => std::option::Option::None,
            }
        }
    }
}
pub mod types {
    //! Convenience types used to make interacting with the NAO more convenient.
    //!
    use nidhogg_derive::Builder;
    use nidhogg_derive::Iterable;
    #[cfg(feature = "serde")]
    use serde::{Deserialize, Serialize};
    /// Struct containing two values of type `T`
    pub struct Vector2<T> {
        pub x: T,
        pub y: T,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<T> _serde::Serialize for Vector2<T>
        where
            T: _serde::Serialize,
        {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Vector2",
                    false as usize + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "x",
                    &self.x,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "y",
                    &self.y,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, T> _serde::Deserialize<'de> for Vector2<T>
        where
            T: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "x" => _serde::__private::Ok(__Field::__field0),
                            "y" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"x" => _serde::__private::Ok(__Field::__field0),
                            b"y" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de, T>
                where
                    T: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<Vector2<T>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de, T> _serde::de::Visitor<'de> for __Visitor<'de, T>
                where
                    T: _serde::Deserialize<'de>,
                {
                    type Value = Vector2<T>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Vector2",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Vector2 with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Vector2 with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Vector2 {
                            x: __field0,
                            y: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<T> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("x"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("y"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("x") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("y") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Vector2 {
                            x: __field0,
                            y: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["x", "y"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Vector2",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Vector2<T>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for Vector2<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "Vector2",
                "x",
                &self.x,
                "y",
                &&self.y,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for Vector2<T> {
        #[inline]
        fn clone(&self) -> Vector2<T> {
            Vector2 {
                x: ::core::clone::Clone::clone(&self.x),
                y: ::core::clone::Clone::clone(&self.y),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for Vector2<T> {
        #[inline]
        fn default() -> Vector2<T> {
            Vector2 {
                x: ::core::default::Default::default(),
                y: ::core::default::Default::default(),
            }
        }
    }
    /// Struct containing three values of type `T`
    pub struct Vector3<T> {
        pub x: T,
        pub y: T,
        pub z: T,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<T> _serde::Serialize for Vector3<T>
        where
            T: _serde::Serialize,
        {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Vector3",
                    false as usize + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "x",
                    &self.x,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "y",
                    &self.y,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "z",
                    &self.z,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, T> _serde::Deserialize<'de> for Vector3<T>
        where
            T: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "x" => _serde::__private::Ok(__Field::__field0),
                            "y" => _serde::__private::Ok(__Field::__field1),
                            "z" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"x" => _serde::__private::Ok(__Field::__field0),
                            b"y" => _serde::__private::Ok(__Field::__field1),
                            b"z" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de, T>
                where
                    T: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<Vector3<T>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de, T> _serde::de::Visitor<'de> for __Visitor<'de, T>
                where
                    T: _serde::Deserialize<'de>,
                {
                    type Value = Vector3<T>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Vector3",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Vector3 with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Vector3 with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Vector3 with 3 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Vector3 {
                            x: __field0,
                            y: __field1,
                            z: __field2,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<T> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("x"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("y"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("z"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("x") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("y") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("z") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Vector3 {
                            x: __field0,
                            y: __field1,
                            z: __field2,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["x", "y", "z"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Vector3",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Vector3<T>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for Vector3<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "Vector3",
                "x",
                &self.x,
                "y",
                &self.y,
                "z",
                &&self.z,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for Vector3<T> {
        #[inline]
        fn clone(&self) -> Vector3<T> {
            Vector3 {
                x: ::core::clone::Clone::clone(&self.x),
                y: ::core::clone::Clone::clone(&self.y),
                z: ::core::clone::Clone::clone(&self.z),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for Vector3<T> {
        #[inline]
        fn default() -> Vector3<T> {
            Vector3 {
                x: ::core::default::Default::default(),
                y: ::core::default::Default::default(),
                z: ::core::default::Default::default(),
            }
        }
    }
    /// Trait that introduces the [`fill`](`FillExt::fill`) method for a type, which allows filling in all fields with the same value.
    pub trait FillExt<T> {
        /// Return a new instance of the type, with all fields set to the provided value.
        fn fill(value: T) -> Self;
    }
    /// Struct representing the LEDs on top of the NAO robot's head.
    ///
    /// Each value represents the intensity of a white LED.
    pub struct Skull {
        pub left_front_0: f32,
        pub left_front_1: f32,
        pub left_middle_0: f32,
        pub left_rear_0: f32,
        pub left_rear_1: f32,
        pub left_rear_2: f32,
        pub right_front_0: f32,
        pub right_front_1: f32,
        pub right_middle_0: f32,
        pub right_rear_0: f32,
        pub right_rear_1: f32,
        pub right_rear_2: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Skull {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Skull",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_front_0",
                    &self.left_front_0,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_front_1",
                    &self.left_front_1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_middle_0",
                    &self.left_middle_0,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_rear_0",
                    &self.left_rear_0,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_rear_1",
                    &self.left_rear_1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_rear_2",
                    &self.left_rear_2,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_front_0",
                    &self.right_front_0,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_front_1",
                    &self.right_front_1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_middle_0",
                    &self.right_middle_0,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_rear_0",
                    &self.right_rear_0,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_rear_1",
                    &self.right_rear_1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_rear_2",
                    &self.right_rear_2,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Skull {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "left_front_0" => _serde::__private::Ok(__Field::__field0),
                            "left_front_1" => _serde::__private::Ok(__Field::__field1),
                            "left_middle_0" => _serde::__private::Ok(__Field::__field2),
                            "left_rear_0" => _serde::__private::Ok(__Field::__field3),
                            "left_rear_1" => _serde::__private::Ok(__Field::__field4),
                            "left_rear_2" => _serde::__private::Ok(__Field::__field5),
                            "right_front_0" => _serde::__private::Ok(__Field::__field6),
                            "right_front_1" => _serde::__private::Ok(__Field::__field7),
                            "right_middle_0" => _serde::__private::Ok(__Field::__field8),
                            "right_rear_0" => _serde::__private::Ok(__Field::__field9),
                            "right_rear_1" => _serde::__private::Ok(__Field::__field10),
                            "right_rear_2" => _serde::__private::Ok(__Field::__field11),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"left_front_0" => _serde::__private::Ok(__Field::__field0),
                            b"left_front_1" => _serde::__private::Ok(__Field::__field1),
                            b"left_middle_0" => _serde::__private::Ok(__Field::__field2),
                            b"left_rear_0" => _serde::__private::Ok(__Field::__field3),
                            b"left_rear_1" => _serde::__private::Ok(__Field::__field4),
                            b"left_rear_2" => _serde::__private::Ok(__Field::__field5),
                            b"right_front_0" => _serde::__private::Ok(__Field::__field6),
                            b"right_front_1" => _serde::__private::Ok(__Field::__field7),
                            b"right_middle_0" => _serde::__private::Ok(__Field::__field8),
                            b"right_rear_0" => _serde::__private::Ok(__Field::__field9),
                            b"right_rear_1" => _serde::__private::Ok(__Field::__field10),
                            b"right_rear_2" => _serde::__private::Ok(__Field::__field11),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Skull>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Skull;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Skull",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct Skull with 12 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Skull {
                            left_front_0: __field0,
                            left_front_1: __field1,
                            left_middle_0: __field2,
                            left_rear_0: __field3,
                            left_rear_1: __field4,
                            left_rear_2: __field5,
                            right_front_0: __field6,
                            right_front_1: __field7,
                            right_middle_0: __field8,
                            right_rear_0: __field9,
                            right_rear_1: __field10,
                            right_rear_2: __field11,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_front_0",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_front_1",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_middle_0",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_rear_0",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_rear_1",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_rear_2",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_front_0",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_front_1",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_middle_0",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_rear_0",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_rear_1",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_rear_2",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left_front_0") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left_front_1") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_middle_0",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left_rear_0") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left_rear_1") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left_rear_2") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_front_0",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_front_1",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_middle_0",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("right_rear_0") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("right_rear_1") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("right_rear_2") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Skull {
                            left_front_0: __field0,
                            left_front_1: __field1,
                            left_middle_0: __field2,
                            left_rear_0: __field3,
                            left_rear_1: __field4,
                            left_rear_2: __field5,
                            right_front_0: __field6,
                            right_front_1: __field7,
                            right_middle_0: __field8,
                            right_rear_0: __field9,
                            right_rear_1: __field10,
                            right_rear_2: __field11,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "left_front_0",
                    "left_front_1",
                    "left_middle_0",
                    "left_rear_0",
                    "left_rear_1",
                    "left_rear_2",
                    "right_front_0",
                    "right_front_1",
                    "right_middle_0",
                    "right_rear_0",
                    "right_rear_1",
                    "right_rear_2",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Skull",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Skull>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`Skull`].
    #[must_use]
    pub struct SkullBuilder {
        left_front_0: Option<f32>,
        left_front_1: Option<f32>,
        left_middle_0: Option<f32>,
        left_rear_0: Option<f32>,
        left_rear_1: Option<f32>,
        left_rear_2: Option<f32>,
        right_front_0: Option<f32>,
        right_front_1: Option<f32>,
        right_middle_0: Option<f32>,
        right_rear_0: Option<f32>,
        right_rear_1: Option<f32>,
        right_rear_2: Option<f32>,
    }
    #[automatically_derived]
    impl ::core::default::Default for SkullBuilder {
        #[inline]
        fn default() -> SkullBuilder {
            SkullBuilder {
                left_front_0: ::core::default::Default::default(),
                left_front_1: ::core::default::Default::default(),
                left_middle_0: ::core::default::Default::default(),
                left_rear_0: ::core::default::Default::default(),
                left_rear_1: ::core::default::Default::default(),
                left_rear_2: ::core::default::Default::default(),
                right_front_0: ::core::default::Default::default(),
                right_front_1: ::core::default::Default::default(),
                right_middle_0: ::core::default::Default::default(),
                right_rear_0: ::core::default::Default::default(),
                right_rear_1: ::core::default::Default::default(),
                right_rear_2: ::core::default::Default::default(),
            }
        }
    }
    impl SkullBuilder {
        ///Set the `left_front_0` value to the provided value.
        pub fn left_front_0(mut self, left_front_0: f32) -> Self {
            self.left_front_0 = Some(left_front_0);
            self
        }
        ///Set the `left_front_1` value to the provided value.
        pub fn left_front_1(mut self, left_front_1: f32) -> Self {
            self.left_front_1 = Some(left_front_1);
            self
        }
        ///Set the `left_middle_0` value to the provided value.
        pub fn left_middle_0(mut self, left_middle_0: f32) -> Self {
            self.left_middle_0 = Some(left_middle_0);
            self
        }
        ///Set the `left_rear_0` value to the provided value.
        pub fn left_rear_0(mut self, left_rear_0: f32) -> Self {
            self.left_rear_0 = Some(left_rear_0);
            self
        }
        ///Set the `left_rear_1` value to the provided value.
        pub fn left_rear_1(mut self, left_rear_1: f32) -> Self {
            self.left_rear_1 = Some(left_rear_1);
            self
        }
        ///Set the `left_rear_2` value to the provided value.
        pub fn left_rear_2(mut self, left_rear_2: f32) -> Self {
            self.left_rear_2 = Some(left_rear_2);
            self
        }
        ///Set the `right_front_0` value to the provided value.
        pub fn right_front_0(mut self, right_front_0: f32) -> Self {
            self.right_front_0 = Some(right_front_0);
            self
        }
        ///Set the `right_front_1` value to the provided value.
        pub fn right_front_1(mut self, right_front_1: f32) -> Self {
            self.right_front_1 = Some(right_front_1);
            self
        }
        ///Set the `right_middle_0` value to the provided value.
        pub fn right_middle_0(mut self, right_middle_0: f32) -> Self {
            self.right_middle_0 = Some(right_middle_0);
            self
        }
        ///Set the `right_rear_0` value to the provided value.
        pub fn right_rear_0(mut self, right_rear_0: f32) -> Self {
            self.right_rear_0 = Some(right_rear_0);
            self
        }
        ///Set the `right_rear_1` value to the provided value.
        pub fn right_rear_1(mut self, right_rear_1: f32) -> Self {
            self.right_rear_1 = Some(right_rear_1);
            self
        }
        ///Set the `right_rear_2` value to the provided value.
        pub fn right_rear_2(mut self, right_rear_2: f32) -> Self {
            self.right_rear_2 = Some(right_rear_2);
            self
        }
        /**Use the provided values to build a new instance of [`Skull`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> Skull {
            Skull {
                left_front_0: self.left_front_0.unwrap_or_default(),
                left_front_1: self.left_front_1.unwrap_or_default(),
                left_middle_0: self.left_middle_0.unwrap_or_default(),
                left_rear_0: self.left_rear_0.unwrap_or_default(),
                left_rear_1: self.left_rear_1.unwrap_or_default(),
                left_rear_2: self.left_rear_2.unwrap_or_default(),
                right_front_0: self.right_front_0.unwrap_or_default(),
                right_front_1: self.right_front_1.unwrap_or_default(),
                right_middle_0: self.right_middle_0.unwrap_or_default(),
                right_rear_0: self.right_rear_0.unwrap_or_default(),
                right_rear_1: self.right_rear_1.unwrap_or_default(),
                right_rear_2: self.right_rear_2.unwrap_or_default(),
            }
        }
    }
    impl Skull {
        pub fn builder() -> SkullBuilder {
            SkullBuilder::default()
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Skull {
        #[inline]
        fn clone(&self) -> Skull {
            Skull {
                left_front_0: ::core::clone::Clone::clone(&self.left_front_0),
                left_front_1: ::core::clone::Clone::clone(&self.left_front_1),
                left_middle_0: ::core::clone::Clone::clone(&self.left_middle_0),
                left_rear_0: ::core::clone::Clone::clone(&self.left_rear_0),
                left_rear_1: ::core::clone::Clone::clone(&self.left_rear_1),
                left_rear_2: ::core::clone::Clone::clone(&self.left_rear_2),
                right_front_0: ::core::clone::Clone::clone(&self.right_front_0),
                right_front_1: ::core::clone::Clone::clone(&self.right_front_1),
                right_middle_0: ::core::clone::Clone::clone(&self.right_middle_0),
                right_rear_0: ::core::clone::Clone::clone(&self.right_rear_0),
                right_rear_1: ::core::clone::Clone::clone(&self.right_rear_1),
                right_rear_2: ::core::clone::Clone::clone(&self.right_rear_2),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Skull {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "left_front_0",
                "left_front_1",
                "left_middle_0",
                "left_rear_0",
                "left_rear_1",
                "left_rear_2",
                "right_front_0",
                "right_front_1",
                "right_middle_0",
                "right_rear_0",
                "right_rear_1",
                "right_rear_2",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.left_front_0,
                &self.left_front_1,
                &self.left_middle_0,
                &self.left_rear_0,
                &self.left_rear_1,
                &self.left_rear_2,
                &self.right_front_0,
                &self.right_front_1,
                &self.right_middle_0,
                &self.right_rear_0,
                &self.right_rear_1,
                &&self.right_rear_2,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(f, "Skull", names, values)
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for Skull {
        #[inline]
        fn default() -> Skull {
            Skull {
                left_front_0: ::core::default::Default::default(),
                left_front_1: ::core::default::Default::default(),
                left_middle_0: ::core::default::Default::default(),
                left_rear_0: ::core::default::Default::default(),
                left_rear_1: ::core::default::Default::default(),
                left_rear_2: ::core::default::Default::default(),
                right_front_0: ::core::default::Default::default(),
                right_front_1: ::core::default::Default::default(),
                right_middle_0: ::core::default::Default::default(),
                right_rear_0: ::core::default::Default::default(),
                right_rear_1: ::core::default::Default::default(),
                right_rear_2: ::core::default::Default::default(),
            }
        }
    }
    impl FillExt<f32> for Skull {
        fn fill(intensity: f32) -> Skull {
            Skull {
                left_front_0: intensity,
                left_front_1: intensity,
                left_middle_0: intensity,
                left_rear_0: intensity,
                left_rear_1: intensity,
                left_rear_2: intensity,
                right_front_0: intensity,
                right_front_1: intensity,
                right_middle_0: intensity,
                right_rear_0: intensity,
                right_rear_1: intensity,
                right_rear_2: intensity,
            }
        }
    }
    /// Struct representing the LED intensities in the left ear of the robot.
    ///
    /// ## LED order:
    /// These LEDs are placed in the following order:
    /// ```text
    ///        0
    ///    324  36
    ///  288     72
    /// 252     108
    ///  216  144
    ///    180
    /// ```
    pub struct LeftEar {
        pub intensity_0_deg: f32,
        pub intensity_36_deg: f32,
        pub intensity_72_deg: f32,
        pub intensity_108_deg: f32,
        pub intensity_144_deg: f32,
        pub intensity_180_deg: f32,
        pub intensity_216_deg: f32,
        pub intensity_252_deg: f32,
        pub intensity_288_deg: f32,
        pub intensity_324_deg: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for LeftEar {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "LeftEar",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_0_deg",
                    &self.intensity_0_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_36_deg",
                    &self.intensity_36_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_72_deg",
                    &self.intensity_72_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_108_deg",
                    &self.intensity_108_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_144_deg",
                    &self.intensity_144_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_180_deg",
                    &self.intensity_180_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_216_deg",
                    &self.intensity_216_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_252_deg",
                    &self.intensity_252_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_288_deg",
                    &self.intensity_288_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_324_deg",
                    &self.intensity_324_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for LeftEar {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "intensity_0_deg" => _serde::__private::Ok(__Field::__field0),
                            "intensity_36_deg" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "intensity_72_deg" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "intensity_108_deg" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "intensity_144_deg" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "intensity_180_deg" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "intensity_216_deg" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            "intensity_252_deg" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            "intensity_288_deg" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            "intensity_324_deg" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"intensity_0_deg" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"intensity_36_deg" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"intensity_72_deg" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"intensity_108_deg" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"intensity_144_deg" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"intensity_180_deg" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"intensity_216_deg" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            b"intensity_252_deg" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            b"intensity_288_deg" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            b"intensity_324_deg" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<LeftEar>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = LeftEar;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct LeftEar",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct LeftEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(LeftEar {
                            intensity_0_deg: __field0,
                            intensity_36_deg: __field1,
                            intensity_72_deg: __field2,
                            intensity_108_deg: __field3,
                            intensity_144_deg: __field4,
                            intensity_180_deg: __field5,
                            intensity_216_deg: __field6,
                            intensity_252_deg: __field7,
                            intensity_288_deg: __field8,
                            intensity_324_deg: __field9,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_0_deg",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_36_deg",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_72_deg",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_108_deg",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_144_deg",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_180_deg",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_216_deg",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_252_deg",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_288_deg",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_324_deg",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_0_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_36_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_72_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_108_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_144_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_180_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_216_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_252_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_288_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_324_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(LeftEar {
                            intensity_0_deg: __field0,
                            intensity_36_deg: __field1,
                            intensity_72_deg: __field2,
                            intensity_108_deg: __field3,
                            intensity_144_deg: __field4,
                            intensity_180_deg: __field5,
                            intensity_216_deg: __field6,
                            intensity_252_deg: __field7,
                            intensity_288_deg: __field8,
                            intensity_324_deg: __field9,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "intensity_0_deg",
                    "intensity_36_deg",
                    "intensity_72_deg",
                    "intensity_108_deg",
                    "intensity_144_deg",
                    "intensity_180_deg",
                    "intensity_216_deg",
                    "intensity_252_deg",
                    "intensity_288_deg",
                    "intensity_324_deg",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "LeftEar",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<LeftEar>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`LeftEar`].
    #[must_use]
    pub struct LeftEarBuilder {
        intensity_0_deg: Option<f32>,
        intensity_36_deg: Option<f32>,
        intensity_72_deg: Option<f32>,
        intensity_108_deg: Option<f32>,
        intensity_144_deg: Option<f32>,
        intensity_180_deg: Option<f32>,
        intensity_216_deg: Option<f32>,
        intensity_252_deg: Option<f32>,
        intensity_288_deg: Option<f32>,
        intensity_324_deg: Option<f32>,
    }
    #[automatically_derived]
    impl ::core::default::Default for LeftEarBuilder {
        #[inline]
        fn default() -> LeftEarBuilder {
            LeftEarBuilder {
                intensity_0_deg: ::core::default::Default::default(),
                intensity_36_deg: ::core::default::Default::default(),
                intensity_72_deg: ::core::default::Default::default(),
                intensity_108_deg: ::core::default::Default::default(),
                intensity_144_deg: ::core::default::Default::default(),
                intensity_180_deg: ::core::default::Default::default(),
                intensity_216_deg: ::core::default::Default::default(),
                intensity_252_deg: ::core::default::Default::default(),
                intensity_288_deg: ::core::default::Default::default(),
                intensity_324_deg: ::core::default::Default::default(),
            }
        }
    }
    impl LeftEarBuilder {
        ///Set the `intensity_0_deg` value to the provided value.
        pub fn intensity_0_deg(mut self, intensity_0_deg: f32) -> Self {
            self.intensity_0_deg = Some(intensity_0_deg);
            self
        }
        ///Set the `intensity_36_deg` value to the provided value.
        pub fn intensity_36_deg(mut self, intensity_36_deg: f32) -> Self {
            self.intensity_36_deg = Some(intensity_36_deg);
            self
        }
        ///Set the `intensity_72_deg` value to the provided value.
        pub fn intensity_72_deg(mut self, intensity_72_deg: f32) -> Self {
            self.intensity_72_deg = Some(intensity_72_deg);
            self
        }
        ///Set the `intensity_108_deg` value to the provided value.
        pub fn intensity_108_deg(mut self, intensity_108_deg: f32) -> Self {
            self.intensity_108_deg = Some(intensity_108_deg);
            self
        }
        ///Set the `intensity_144_deg` value to the provided value.
        pub fn intensity_144_deg(mut self, intensity_144_deg: f32) -> Self {
            self.intensity_144_deg = Some(intensity_144_deg);
            self
        }
        ///Set the `intensity_180_deg` value to the provided value.
        pub fn intensity_180_deg(mut self, intensity_180_deg: f32) -> Self {
            self.intensity_180_deg = Some(intensity_180_deg);
            self
        }
        ///Set the `intensity_216_deg` value to the provided value.
        pub fn intensity_216_deg(mut self, intensity_216_deg: f32) -> Self {
            self.intensity_216_deg = Some(intensity_216_deg);
            self
        }
        ///Set the `intensity_252_deg` value to the provided value.
        pub fn intensity_252_deg(mut self, intensity_252_deg: f32) -> Self {
            self.intensity_252_deg = Some(intensity_252_deg);
            self
        }
        ///Set the `intensity_288_deg` value to the provided value.
        pub fn intensity_288_deg(mut self, intensity_288_deg: f32) -> Self {
            self.intensity_288_deg = Some(intensity_288_deg);
            self
        }
        ///Set the `intensity_324_deg` value to the provided value.
        pub fn intensity_324_deg(mut self, intensity_324_deg: f32) -> Self {
            self.intensity_324_deg = Some(intensity_324_deg);
            self
        }
        /**Use the provided values to build a new instance of [`LeftEar`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> LeftEar {
            LeftEar {
                intensity_0_deg: self.intensity_0_deg.unwrap_or_default(),
                intensity_36_deg: self.intensity_36_deg.unwrap_or_default(),
                intensity_72_deg: self.intensity_72_deg.unwrap_or_default(),
                intensity_108_deg: self.intensity_108_deg.unwrap_or_default(),
                intensity_144_deg: self.intensity_144_deg.unwrap_or_default(),
                intensity_180_deg: self.intensity_180_deg.unwrap_or_default(),
                intensity_216_deg: self.intensity_216_deg.unwrap_or_default(),
                intensity_252_deg: self.intensity_252_deg.unwrap_or_default(),
                intensity_288_deg: self.intensity_288_deg.unwrap_or_default(),
                intensity_324_deg: self.intensity_324_deg.unwrap_or_default(),
            }
        }
    }
    impl LeftEar {
        pub fn builder() -> LeftEarBuilder {
            LeftEarBuilder::default()
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for LeftEar {
        #[inline]
        fn clone(&self) -> LeftEar {
            LeftEar {
                intensity_0_deg: ::core::clone::Clone::clone(&self.intensity_0_deg),
                intensity_36_deg: ::core::clone::Clone::clone(&self.intensity_36_deg),
                intensity_72_deg: ::core::clone::Clone::clone(&self.intensity_72_deg),
                intensity_108_deg: ::core::clone::Clone::clone(&self.intensity_108_deg),
                intensity_144_deg: ::core::clone::Clone::clone(&self.intensity_144_deg),
                intensity_180_deg: ::core::clone::Clone::clone(&self.intensity_180_deg),
                intensity_216_deg: ::core::clone::Clone::clone(&self.intensity_216_deg),
                intensity_252_deg: ::core::clone::Clone::clone(&self.intensity_252_deg),
                intensity_288_deg: ::core::clone::Clone::clone(&self.intensity_288_deg),
                intensity_324_deg: ::core::clone::Clone::clone(&self.intensity_324_deg),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for LeftEar {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "intensity_0_deg",
                "intensity_36_deg",
                "intensity_72_deg",
                "intensity_108_deg",
                "intensity_144_deg",
                "intensity_180_deg",
                "intensity_216_deg",
                "intensity_252_deg",
                "intensity_288_deg",
                "intensity_324_deg",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.intensity_0_deg,
                &self.intensity_36_deg,
                &self.intensity_72_deg,
                &self.intensity_108_deg,
                &self.intensity_144_deg,
                &self.intensity_180_deg,
                &self.intensity_216_deg,
                &self.intensity_252_deg,
                &self.intensity_288_deg,
                &&self.intensity_324_deg,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "LeftEar",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for LeftEar {
        #[inline]
        fn default() -> LeftEar {
            LeftEar {
                intensity_0_deg: ::core::default::Default::default(),
                intensity_36_deg: ::core::default::Default::default(),
                intensity_72_deg: ::core::default::Default::default(),
                intensity_108_deg: ::core::default::Default::default(),
                intensity_144_deg: ::core::default::Default::default(),
                intensity_180_deg: ::core::default::Default::default(),
                intensity_216_deg: ::core::default::Default::default(),
                intensity_252_deg: ::core::default::Default::default(),
                intensity_288_deg: ::core::default::Default::default(),
                intensity_324_deg: ::core::default::Default::default(),
            }
        }
    }
    impl FillExt<f32> for LeftEar {
        fn fill(intensity: f32) -> LeftEar {
            LeftEar {
                intensity_0_deg: intensity,
                intensity_36_deg: intensity,
                intensity_72_deg: intensity,
                intensity_108_deg: intensity,
                intensity_144_deg: intensity,
                intensity_180_deg: intensity,
                intensity_216_deg: intensity,
                intensity_252_deg: intensity,
                intensity_288_deg: intensity,
                intensity_324_deg: intensity,
            }
        }
    }
    /// Struct representing the LED intensities in the right ear of the robot.
    ///
    /// ## LED order:
    /// These LEDs are placed in the following order:
    /// ```text
    ///        0
    ///    324  36
    ///  288     72
    /// 252     108
    ///  216  144
    ///    180
    /// ```
    pub struct RightEar {
        pub intensity_0_deg: f32,
        pub intensity_36_deg: f32,
        pub intensity_72_deg: f32,
        pub intensity_108_deg: f32,
        pub intensity_144_deg: f32,
        pub intensity_180_deg: f32,
        pub intensity_216_deg: f32,
        pub intensity_252_deg: f32,
        pub intensity_288_deg: f32,
        pub intensity_324_deg: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for RightEar {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "RightEar",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_0_deg",
                    &self.intensity_0_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_36_deg",
                    &self.intensity_36_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_72_deg",
                    &self.intensity_72_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_108_deg",
                    &self.intensity_108_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_144_deg",
                    &self.intensity_144_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_180_deg",
                    &self.intensity_180_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_216_deg",
                    &self.intensity_216_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_252_deg",
                    &self.intensity_252_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_288_deg",
                    &self.intensity_288_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "intensity_324_deg",
                    &self.intensity_324_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for RightEar {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "intensity_0_deg" => _serde::__private::Ok(__Field::__field0),
                            "intensity_36_deg" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            "intensity_72_deg" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "intensity_108_deg" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "intensity_144_deg" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            "intensity_180_deg" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            "intensity_216_deg" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            "intensity_252_deg" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            "intensity_288_deg" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            "intensity_324_deg" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"intensity_0_deg" => {
                                _serde::__private::Ok(__Field::__field0)
                            }
                            b"intensity_36_deg" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            b"intensity_72_deg" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"intensity_108_deg" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"intensity_144_deg" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"intensity_180_deg" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"intensity_216_deg" => {
                                _serde::__private::Ok(__Field::__field6)
                            }
                            b"intensity_252_deg" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            b"intensity_288_deg" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            b"intensity_324_deg" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<RightEar>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = RightEar;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct RightEar",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct RightEar with 10 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(RightEar {
                            intensity_0_deg: __field0,
                            intensity_36_deg: __field1,
                            intensity_72_deg: __field2,
                            intensity_108_deg: __field3,
                            intensity_144_deg: __field4,
                            intensity_180_deg: __field5,
                            intensity_216_deg: __field6,
                            intensity_252_deg: __field7,
                            intensity_288_deg: __field8,
                            intensity_324_deg: __field9,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_0_deg",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_36_deg",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_72_deg",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_108_deg",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_144_deg",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_180_deg",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_216_deg",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_252_deg",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_288_deg",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "intensity_324_deg",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_0_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_36_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_72_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_108_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_144_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_180_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_216_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_252_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_288_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "intensity_324_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(RightEar {
                            intensity_0_deg: __field0,
                            intensity_36_deg: __field1,
                            intensity_72_deg: __field2,
                            intensity_108_deg: __field3,
                            intensity_144_deg: __field4,
                            intensity_180_deg: __field5,
                            intensity_216_deg: __field6,
                            intensity_252_deg: __field7,
                            intensity_288_deg: __field8,
                            intensity_324_deg: __field9,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "intensity_0_deg",
                    "intensity_36_deg",
                    "intensity_72_deg",
                    "intensity_108_deg",
                    "intensity_144_deg",
                    "intensity_180_deg",
                    "intensity_216_deg",
                    "intensity_252_deg",
                    "intensity_288_deg",
                    "intensity_324_deg",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "RightEar",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<RightEar>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`RightEar`].
    #[must_use]
    pub struct RightEarBuilder {
        intensity_0_deg: Option<f32>,
        intensity_36_deg: Option<f32>,
        intensity_72_deg: Option<f32>,
        intensity_108_deg: Option<f32>,
        intensity_144_deg: Option<f32>,
        intensity_180_deg: Option<f32>,
        intensity_216_deg: Option<f32>,
        intensity_252_deg: Option<f32>,
        intensity_288_deg: Option<f32>,
        intensity_324_deg: Option<f32>,
    }
    #[automatically_derived]
    impl ::core::default::Default for RightEarBuilder {
        #[inline]
        fn default() -> RightEarBuilder {
            RightEarBuilder {
                intensity_0_deg: ::core::default::Default::default(),
                intensity_36_deg: ::core::default::Default::default(),
                intensity_72_deg: ::core::default::Default::default(),
                intensity_108_deg: ::core::default::Default::default(),
                intensity_144_deg: ::core::default::Default::default(),
                intensity_180_deg: ::core::default::Default::default(),
                intensity_216_deg: ::core::default::Default::default(),
                intensity_252_deg: ::core::default::Default::default(),
                intensity_288_deg: ::core::default::Default::default(),
                intensity_324_deg: ::core::default::Default::default(),
            }
        }
    }
    impl RightEarBuilder {
        ///Set the `intensity_0_deg` value to the provided value.
        pub fn intensity_0_deg(mut self, intensity_0_deg: f32) -> Self {
            self.intensity_0_deg = Some(intensity_0_deg);
            self
        }
        ///Set the `intensity_36_deg` value to the provided value.
        pub fn intensity_36_deg(mut self, intensity_36_deg: f32) -> Self {
            self.intensity_36_deg = Some(intensity_36_deg);
            self
        }
        ///Set the `intensity_72_deg` value to the provided value.
        pub fn intensity_72_deg(mut self, intensity_72_deg: f32) -> Self {
            self.intensity_72_deg = Some(intensity_72_deg);
            self
        }
        ///Set the `intensity_108_deg` value to the provided value.
        pub fn intensity_108_deg(mut self, intensity_108_deg: f32) -> Self {
            self.intensity_108_deg = Some(intensity_108_deg);
            self
        }
        ///Set the `intensity_144_deg` value to the provided value.
        pub fn intensity_144_deg(mut self, intensity_144_deg: f32) -> Self {
            self.intensity_144_deg = Some(intensity_144_deg);
            self
        }
        ///Set the `intensity_180_deg` value to the provided value.
        pub fn intensity_180_deg(mut self, intensity_180_deg: f32) -> Self {
            self.intensity_180_deg = Some(intensity_180_deg);
            self
        }
        ///Set the `intensity_216_deg` value to the provided value.
        pub fn intensity_216_deg(mut self, intensity_216_deg: f32) -> Self {
            self.intensity_216_deg = Some(intensity_216_deg);
            self
        }
        ///Set the `intensity_252_deg` value to the provided value.
        pub fn intensity_252_deg(mut self, intensity_252_deg: f32) -> Self {
            self.intensity_252_deg = Some(intensity_252_deg);
            self
        }
        ///Set the `intensity_288_deg` value to the provided value.
        pub fn intensity_288_deg(mut self, intensity_288_deg: f32) -> Self {
            self.intensity_288_deg = Some(intensity_288_deg);
            self
        }
        ///Set the `intensity_324_deg` value to the provided value.
        pub fn intensity_324_deg(mut self, intensity_324_deg: f32) -> Self {
            self.intensity_324_deg = Some(intensity_324_deg);
            self
        }
        /**Use the provided values to build a new instance of [`RightEar`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> RightEar {
            RightEar {
                intensity_0_deg: self.intensity_0_deg.unwrap_or_default(),
                intensity_36_deg: self.intensity_36_deg.unwrap_or_default(),
                intensity_72_deg: self.intensity_72_deg.unwrap_or_default(),
                intensity_108_deg: self.intensity_108_deg.unwrap_or_default(),
                intensity_144_deg: self.intensity_144_deg.unwrap_or_default(),
                intensity_180_deg: self.intensity_180_deg.unwrap_or_default(),
                intensity_216_deg: self.intensity_216_deg.unwrap_or_default(),
                intensity_252_deg: self.intensity_252_deg.unwrap_or_default(),
                intensity_288_deg: self.intensity_288_deg.unwrap_or_default(),
                intensity_324_deg: self.intensity_324_deg.unwrap_or_default(),
            }
        }
    }
    impl RightEar {
        pub fn builder() -> RightEarBuilder {
            RightEarBuilder::default()
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for RightEar {
        #[inline]
        fn clone(&self) -> RightEar {
            RightEar {
                intensity_0_deg: ::core::clone::Clone::clone(&self.intensity_0_deg),
                intensity_36_deg: ::core::clone::Clone::clone(&self.intensity_36_deg),
                intensity_72_deg: ::core::clone::Clone::clone(&self.intensity_72_deg),
                intensity_108_deg: ::core::clone::Clone::clone(&self.intensity_108_deg),
                intensity_144_deg: ::core::clone::Clone::clone(&self.intensity_144_deg),
                intensity_180_deg: ::core::clone::Clone::clone(&self.intensity_180_deg),
                intensity_216_deg: ::core::clone::Clone::clone(&self.intensity_216_deg),
                intensity_252_deg: ::core::clone::Clone::clone(&self.intensity_252_deg),
                intensity_288_deg: ::core::clone::Clone::clone(&self.intensity_288_deg),
                intensity_324_deg: ::core::clone::Clone::clone(&self.intensity_324_deg),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for RightEar {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "intensity_0_deg",
                "intensity_36_deg",
                "intensity_72_deg",
                "intensity_108_deg",
                "intensity_144_deg",
                "intensity_180_deg",
                "intensity_216_deg",
                "intensity_252_deg",
                "intensity_288_deg",
                "intensity_324_deg",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.intensity_0_deg,
                &self.intensity_36_deg,
                &self.intensity_72_deg,
                &self.intensity_108_deg,
                &self.intensity_144_deg,
                &self.intensity_180_deg,
                &self.intensity_216_deg,
                &self.intensity_252_deg,
                &self.intensity_288_deg,
                &&self.intensity_324_deg,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "RightEar",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for RightEar {
        #[inline]
        fn default() -> RightEar {
            RightEar {
                intensity_0_deg: ::core::default::Default::default(),
                intensity_36_deg: ::core::default::Default::default(),
                intensity_72_deg: ::core::default::Default::default(),
                intensity_108_deg: ::core::default::Default::default(),
                intensity_144_deg: ::core::default::Default::default(),
                intensity_180_deg: ::core::default::Default::default(),
                intensity_216_deg: ::core::default::Default::default(),
                intensity_252_deg: ::core::default::Default::default(),
                intensity_288_deg: ::core::default::Default::default(),
                intensity_324_deg: ::core::default::Default::default(),
            }
        }
    }
    impl FillExt<f32> for RightEar {
        fn fill(intensity: f32) -> RightEar {
            RightEar {
                intensity_0_deg: intensity,
                intensity_36_deg: intensity,
                intensity_72_deg: intensity,
                intensity_108_deg: intensity,
                intensity_144_deg: intensity,
                intensity_180_deg: intensity,
                intensity_216_deg: intensity,
                intensity_252_deg: intensity,
                intensity_288_deg: intensity,
                intensity_324_deg: intensity,
            }
        }
    }
    /// Struct representing an RGB color.
    pub struct Color {
        pub red: f32,
        pub green: f32,
        pub blue: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Color {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Color",
                    false as usize + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "red",
                    &self.red,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "green",
                    &self.green,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "blue",
                    &self.blue,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Color {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "red" => _serde::__private::Ok(__Field::__field0),
                            "green" => _serde::__private::Ok(__Field::__field1),
                            "blue" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"red" => _serde::__private::Ok(__Field::__field0),
                            b"green" => _serde::__private::Ok(__Field::__field1),
                            b"blue" => _serde::__private::Ok(__Field::__field2),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Color>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Color;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Color",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Color with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Color with 3 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Color with 3 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Color {
                            red: __field0,
                            green: __field1,
                            blue: __field2,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("red"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("green"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("blue"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("red") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("green") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("blue") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Color {
                            red: __field0,
                            green: __field1,
                            blue: __field2,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["red", "green", "blue"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Color",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Color>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::fmt::Debug for Color {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "Color",
                "red",
                &self.red,
                "green",
                &self.green,
                "blue",
                &&self.blue,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for Color {
        #[inline]
        fn default() -> Color {
            Color {
                red: ::core::default::Default::default(),
                green: ::core::default::Default::default(),
                blue: ::core::default::Default::default(),
            }
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Color {
        #[inline]
        fn clone(&self) -> Color {
            let _: ::core::clone::AssertParamIsClone<f32>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Color {}
    ///Builder struct for [`Color`].
    #[must_use]
    pub struct ColorBuilder {
        red: Option<f32>,
        green: Option<f32>,
        blue: Option<f32>,
    }
    #[automatically_derived]
    impl ::core::default::Default for ColorBuilder {
        #[inline]
        fn default() -> ColorBuilder {
            ColorBuilder {
                red: ::core::default::Default::default(),
                green: ::core::default::Default::default(),
                blue: ::core::default::Default::default(),
            }
        }
    }
    impl ColorBuilder {
        ///Set the `red` value to the provided value.
        pub fn red(mut self, red: f32) -> Self {
            self.red = Some(red);
            self
        }
        ///Set the `green` value to the provided value.
        pub fn green(mut self, green: f32) -> Self {
            self.green = Some(green);
            self
        }
        ///Set the `blue` value to the provided value.
        pub fn blue(mut self, blue: f32) -> Self {
            self.blue = Some(blue);
            self
        }
        /**Use the provided values to build a new instance of [`Color`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> Color {
            Color {
                red: self.red.unwrap_or_default(),
                green: self.green.unwrap_or_default(),
                blue: self.blue.unwrap_or_default(),
            }
        }
    }
    impl Color {
        pub fn builder() -> ColorBuilder {
            ColorBuilder::default()
        }
    }
    impl Color {
        #[must_use]
        pub fn new(red: f32, green: f32, blue: f32) -> Self {
            Self { red, green, blue }
        }
        /// Create a new color from three `u8` values.
        pub fn new_u8(red: u8, green: u8, blue: u8) -> Self {
            Self {
                red: red as f32 / 255.0,
                green: green as f32 / 255.0,
                blue: blue as f32 / 255.0,
            }
        }
        /// Create a new color from a u32 value.
        pub fn new_u32(color: u32) -> Self {
            Color::new_u8(
                ((color >> 16) & 0xFF) as u8,
                ((color >> 8) & 0xFF) as u8,
                (color & 0xFF) as u8,
            )
        }
        /// The color blue
        pub const BLUE: Color = Color {
            red: 0.0,
            green: 0.0,
            blue: 1.0,
        };
        /// The color cyan
        pub const CYAN: Color = Color {
            red: 0.0,
            green: 1.0,
            blue: 1.0,
        };
        /// No color
        ///
        /// This color will result in the LEDs being turned off.
        pub const EMPTY: Color = Color {
            red: 0.0,
            green: 0.0,
            blue: 0.0,
        };
        /// The color gray
        pub const GRAY: Color = Color {
            red: 0.5,
            green: 0.5,
            blue: 0.5,
        };
        /// The color green
        pub const GREEN: Color = Color {
            red: 0.0,
            green: 0.5,
            blue: 0.0,
        };
        /// The color lime
        pub const LIME: Color = Color {
            red: 0.0,
            green: 1.0,
            blue: 0.0,
        };
        /// The color magenta
        pub const MAGENTA: Color = Color {
            red: 1.0,
            green: 0.0,
            blue: 1.0,
        };
        /// The color maroon
        pub const MAROON: Color = Color {
            red: 0.5,
            green: 0.0,
            blue: 0.0,
        };
        /// The color navy
        pub const NAVY: Color = Color {
            red: 0.0,
            green: 0.0,
            blue: 0.5,
        };
        /// The color olive
        pub const OLIVE: Color = Color {
            red: 0.5,
            green: 0.5,
            blue: 0.0,
        };
        /// The color purple
        pub const PURPLE: Color = Color {
            red: 0.5,
            green: 0.0,
            blue: 0.5,
        };
        /// The color red
        pub const RED: Color = Color {
            red: 1.0,
            green: 0.0,
            blue: 0.0,
        };
        /// The color silver
        pub const SILVER: Color = Color {
            red: 0.75,
            green: 0.75,
            blue: 0.75,
        };
        /// The color teal
        pub const TEAL: Color = Color {
            red: 0.0,
            green: 0.5,
            blue: 0.5,
        };
        /// The color white
        pub const WHITE: Color = Color {
            red: 1.0,
            green: 1.0,
            blue: 1.0,
        };
        /// The color yellow
        pub const YELLOW: Color = Color {
            red: 1.0,
            green: 1.0,
            blue: 0.0,
        };
    }
    /// Struct representing the RGB LEDs in the left eye of the robot.
    /// ## LED order:
    /// These LEDs are placed in the following order:
    /// ```text
    ///     0
    ///  45    315
    /// 90      270
    ///  135   225
    ///    180
    /// ```
    pub struct LeftEye {
        pub color_0_deg: Color,
        pub color_45_deg: Color,
        pub color_90_deg: Color,
        pub color_135_deg: Color,
        pub color_180_deg: Color,
        pub color_225_deg: Color,
        pub color_270_deg: Color,
        pub color_315_deg: Color,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for LeftEye {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "LeftEye",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_0_deg",
                    &self.color_0_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_45_deg",
                    &self.color_45_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_90_deg",
                    &self.color_90_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_135_deg",
                    &self.color_135_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_180_deg",
                    &self.color_180_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_225_deg",
                    &self.color_225_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_270_deg",
                    &self.color_270_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_315_deg",
                    &self.color_315_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for LeftEye {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "color_0_deg" => _serde::__private::Ok(__Field::__field0),
                            "color_45_deg" => _serde::__private::Ok(__Field::__field1),
                            "color_90_deg" => _serde::__private::Ok(__Field::__field2),
                            "color_135_deg" => _serde::__private::Ok(__Field::__field3),
                            "color_180_deg" => _serde::__private::Ok(__Field::__field4),
                            "color_225_deg" => _serde::__private::Ok(__Field::__field5),
                            "color_270_deg" => _serde::__private::Ok(__Field::__field6),
                            "color_315_deg" => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"color_0_deg" => _serde::__private::Ok(__Field::__field0),
                            b"color_45_deg" => _serde::__private::Ok(__Field::__field1),
                            b"color_90_deg" => _serde::__private::Ok(__Field::__field2),
                            b"color_135_deg" => _serde::__private::Ok(__Field::__field3),
                            b"color_180_deg" => _serde::__private::Ok(__Field::__field4),
                            b"color_225_deg" => _serde::__private::Ok(__Field::__field5),
                            b"color_270_deg" => _serde::__private::Ok(__Field::__field6),
                            b"color_315_deg" => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<LeftEye>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = LeftEye;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct LeftEye",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct LeftEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(LeftEye {
                            color_0_deg: __field0,
                            color_45_deg: __field1,
                            color_90_deg: __field2,
                            color_135_deg: __field3,
                            color_180_deg: __field4,
                            color_225_deg: __field5,
                            color_270_deg: __field6,
                            color_315_deg: __field7,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<Color> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_0_deg",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_45_deg",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_90_deg",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_135_deg",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_180_deg",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_225_deg",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_270_deg",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_315_deg",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("color_0_deg") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("color_45_deg") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("color_90_deg") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_135_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_180_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_225_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_270_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_315_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(LeftEye {
                            color_0_deg: __field0,
                            color_45_deg: __field1,
                            color_90_deg: __field2,
                            color_135_deg: __field3,
                            color_180_deg: __field4,
                            color_225_deg: __field5,
                            color_270_deg: __field6,
                            color_315_deg: __field7,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "color_0_deg",
                    "color_45_deg",
                    "color_90_deg",
                    "color_135_deg",
                    "color_180_deg",
                    "color_225_deg",
                    "color_270_deg",
                    "color_315_deg",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "LeftEye",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<LeftEye>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`LeftEye`].
    #[must_use]
    pub struct LeftEyeBuilder {
        color_0_deg: Option<Color>,
        color_45_deg: Option<Color>,
        color_90_deg: Option<Color>,
        color_135_deg: Option<Color>,
        color_180_deg: Option<Color>,
        color_225_deg: Option<Color>,
        color_270_deg: Option<Color>,
        color_315_deg: Option<Color>,
    }
    #[automatically_derived]
    impl ::core::default::Default for LeftEyeBuilder {
        #[inline]
        fn default() -> LeftEyeBuilder {
            LeftEyeBuilder {
                color_0_deg: ::core::default::Default::default(),
                color_45_deg: ::core::default::Default::default(),
                color_90_deg: ::core::default::Default::default(),
                color_135_deg: ::core::default::Default::default(),
                color_180_deg: ::core::default::Default::default(),
                color_225_deg: ::core::default::Default::default(),
                color_270_deg: ::core::default::Default::default(),
                color_315_deg: ::core::default::Default::default(),
            }
        }
    }
    impl LeftEyeBuilder {
        ///Set the `color_0_deg` value to the provided value.
        pub fn color_0_deg(mut self, color_0_deg: Color) -> Self {
            self.color_0_deg = Some(color_0_deg);
            self
        }
        ///Set the `color_45_deg` value to the provided value.
        pub fn color_45_deg(mut self, color_45_deg: Color) -> Self {
            self.color_45_deg = Some(color_45_deg);
            self
        }
        ///Set the `color_90_deg` value to the provided value.
        pub fn color_90_deg(mut self, color_90_deg: Color) -> Self {
            self.color_90_deg = Some(color_90_deg);
            self
        }
        ///Set the `color_135_deg` value to the provided value.
        pub fn color_135_deg(mut self, color_135_deg: Color) -> Self {
            self.color_135_deg = Some(color_135_deg);
            self
        }
        ///Set the `color_180_deg` value to the provided value.
        pub fn color_180_deg(mut self, color_180_deg: Color) -> Self {
            self.color_180_deg = Some(color_180_deg);
            self
        }
        ///Set the `color_225_deg` value to the provided value.
        pub fn color_225_deg(mut self, color_225_deg: Color) -> Self {
            self.color_225_deg = Some(color_225_deg);
            self
        }
        ///Set the `color_270_deg` value to the provided value.
        pub fn color_270_deg(mut self, color_270_deg: Color) -> Self {
            self.color_270_deg = Some(color_270_deg);
            self
        }
        ///Set the `color_315_deg` value to the provided value.
        pub fn color_315_deg(mut self, color_315_deg: Color) -> Self {
            self.color_315_deg = Some(color_315_deg);
            self
        }
        /**Use the provided values to build a new instance of [`LeftEye`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> LeftEye {
            LeftEye {
                color_0_deg: self.color_0_deg.unwrap_or_default(),
                color_45_deg: self.color_45_deg.unwrap_or_default(),
                color_90_deg: self.color_90_deg.unwrap_or_default(),
                color_135_deg: self.color_135_deg.unwrap_or_default(),
                color_180_deg: self.color_180_deg.unwrap_or_default(),
                color_225_deg: self.color_225_deg.unwrap_or_default(),
                color_270_deg: self.color_270_deg.unwrap_or_default(),
                color_315_deg: self.color_315_deg.unwrap_or_default(),
            }
        }
    }
    impl LeftEye {
        pub fn builder() -> LeftEyeBuilder {
            LeftEyeBuilder::default()
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for LeftEye {
        #[inline]
        fn clone(&self) -> LeftEye {
            LeftEye {
                color_0_deg: ::core::clone::Clone::clone(&self.color_0_deg),
                color_45_deg: ::core::clone::Clone::clone(&self.color_45_deg),
                color_90_deg: ::core::clone::Clone::clone(&self.color_90_deg),
                color_135_deg: ::core::clone::Clone::clone(&self.color_135_deg),
                color_180_deg: ::core::clone::Clone::clone(&self.color_180_deg),
                color_225_deg: ::core::clone::Clone::clone(&self.color_225_deg),
                color_270_deg: ::core::clone::Clone::clone(&self.color_270_deg),
                color_315_deg: ::core::clone::Clone::clone(&self.color_315_deg),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for LeftEye {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "color_0_deg",
                "color_45_deg",
                "color_90_deg",
                "color_135_deg",
                "color_180_deg",
                "color_225_deg",
                "color_270_deg",
                "color_315_deg",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.color_0_deg,
                &self.color_45_deg,
                &self.color_90_deg,
                &self.color_135_deg,
                &self.color_180_deg,
                &self.color_225_deg,
                &self.color_270_deg,
                &&self.color_315_deg,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "LeftEye",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for LeftEye {
        #[inline]
        fn default() -> LeftEye {
            LeftEye {
                color_0_deg: ::core::default::Default::default(),
                color_45_deg: ::core::default::Default::default(),
                color_90_deg: ::core::default::Default::default(),
                color_135_deg: ::core::default::Default::default(),
                color_180_deg: ::core::default::Default::default(),
                color_225_deg: ::core::default::Default::default(),
                color_270_deg: ::core::default::Default::default(),
                color_315_deg: ::core::default::Default::default(),
            }
        }
    }
    impl FillExt<Color> for LeftEye {
        fn fill(color: Color) -> LeftEye {
            LeftEye {
                color_0_deg: color,
                color_45_deg: color,
                color_90_deg: color,
                color_135_deg: color,
                color_180_deg: color,
                color_225_deg: color,
                color_270_deg: color,
                color_315_deg: color,
            }
        }
    }
    /// Struct representing the RGB LEDs in the left eye of the robot.
    /// ## LED order:
    /// These LEDs are placed in the following order:
    /// ```text
    ///     0
    ///  45    315
    /// 90      270
    ///  135   225
    ///    180
    /// ```
    pub struct RightEye {
        pub color_0_deg: Color,
        pub color_45_deg: Color,
        pub color_90_deg: Color,
        pub color_135_deg: Color,
        pub color_180_deg: Color,
        pub color_225_deg: Color,
        pub color_270_deg: Color,
        pub color_315_deg: Color,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for RightEye {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "RightEye",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_0_deg",
                    &self.color_0_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_45_deg",
                    &self.color_45_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_90_deg",
                    &self.color_90_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_135_deg",
                    &self.color_135_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_180_deg",
                    &self.color_180_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_225_deg",
                    &self.color_225_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_270_deg",
                    &self.color_270_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "color_315_deg",
                    &self.color_315_deg,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for RightEye {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "color_0_deg" => _serde::__private::Ok(__Field::__field0),
                            "color_45_deg" => _serde::__private::Ok(__Field::__field1),
                            "color_90_deg" => _serde::__private::Ok(__Field::__field2),
                            "color_135_deg" => _serde::__private::Ok(__Field::__field3),
                            "color_180_deg" => _serde::__private::Ok(__Field::__field4),
                            "color_225_deg" => _serde::__private::Ok(__Field::__field5),
                            "color_270_deg" => _serde::__private::Ok(__Field::__field6),
                            "color_315_deg" => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"color_0_deg" => _serde::__private::Ok(__Field::__field0),
                            b"color_45_deg" => _serde::__private::Ok(__Field::__field1),
                            b"color_90_deg" => _serde::__private::Ok(__Field::__field2),
                            b"color_135_deg" => _serde::__private::Ok(__Field::__field3),
                            b"color_180_deg" => _serde::__private::Ok(__Field::__field4),
                            b"color_225_deg" => _serde::__private::Ok(__Field::__field5),
                            b"color_270_deg" => _serde::__private::Ok(__Field::__field6),
                            b"color_315_deg" => _serde::__private::Ok(__Field::__field7),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<RightEye>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = RightEye;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct RightEye",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            Color,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct RightEye with 8 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(RightEye {
                            color_0_deg: __field0,
                            color_45_deg: __field1,
                            color_90_deg: __field2,
                            color_135_deg: __field3,
                            color_180_deg: __field4,
                            color_225_deg: __field5,
                            color_270_deg: __field6,
                            color_315_deg: __field7,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<Color> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<Color> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_0_deg",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_45_deg",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_90_deg",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_135_deg",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_180_deg",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_225_deg",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_270_deg",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "color_315_deg",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Color,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("color_0_deg") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("color_45_deg") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("color_90_deg") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_135_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_180_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_225_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_270_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "color_315_deg",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(RightEye {
                            color_0_deg: __field0,
                            color_45_deg: __field1,
                            color_90_deg: __field2,
                            color_135_deg: __field3,
                            color_180_deg: __field4,
                            color_225_deg: __field5,
                            color_270_deg: __field6,
                            color_315_deg: __field7,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "color_0_deg",
                    "color_45_deg",
                    "color_90_deg",
                    "color_135_deg",
                    "color_180_deg",
                    "color_225_deg",
                    "color_270_deg",
                    "color_315_deg",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "RightEye",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<RightEye>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`RightEye`].
    #[must_use]
    pub struct RightEyeBuilder {
        color_0_deg: Option<Color>,
        color_45_deg: Option<Color>,
        color_90_deg: Option<Color>,
        color_135_deg: Option<Color>,
        color_180_deg: Option<Color>,
        color_225_deg: Option<Color>,
        color_270_deg: Option<Color>,
        color_315_deg: Option<Color>,
    }
    #[automatically_derived]
    impl ::core::default::Default for RightEyeBuilder {
        #[inline]
        fn default() -> RightEyeBuilder {
            RightEyeBuilder {
                color_0_deg: ::core::default::Default::default(),
                color_45_deg: ::core::default::Default::default(),
                color_90_deg: ::core::default::Default::default(),
                color_135_deg: ::core::default::Default::default(),
                color_180_deg: ::core::default::Default::default(),
                color_225_deg: ::core::default::Default::default(),
                color_270_deg: ::core::default::Default::default(),
                color_315_deg: ::core::default::Default::default(),
            }
        }
    }
    impl RightEyeBuilder {
        ///Set the `color_0_deg` value to the provided value.
        pub fn color_0_deg(mut self, color_0_deg: Color) -> Self {
            self.color_0_deg = Some(color_0_deg);
            self
        }
        ///Set the `color_45_deg` value to the provided value.
        pub fn color_45_deg(mut self, color_45_deg: Color) -> Self {
            self.color_45_deg = Some(color_45_deg);
            self
        }
        ///Set the `color_90_deg` value to the provided value.
        pub fn color_90_deg(mut self, color_90_deg: Color) -> Self {
            self.color_90_deg = Some(color_90_deg);
            self
        }
        ///Set the `color_135_deg` value to the provided value.
        pub fn color_135_deg(mut self, color_135_deg: Color) -> Self {
            self.color_135_deg = Some(color_135_deg);
            self
        }
        ///Set the `color_180_deg` value to the provided value.
        pub fn color_180_deg(mut self, color_180_deg: Color) -> Self {
            self.color_180_deg = Some(color_180_deg);
            self
        }
        ///Set the `color_225_deg` value to the provided value.
        pub fn color_225_deg(mut self, color_225_deg: Color) -> Self {
            self.color_225_deg = Some(color_225_deg);
            self
        }
        ///Set the `color_270_deg` value to the provided value.
        pub fn color_270_deg(mut self, color_270_deg: Color) -> Self {
            self.color_270_deg = Some(color_270_deg);
            self
        }
        ///Set the `color_315_deg` value to the provided value.
        pub fn color_315_deg(mut self, color_315_deg: Color) -> Self {
            self.color_315_deg = Some(color_315_deg);
            self
        }
        /**Use the provided values to build a new instance of [`RightEye`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> RightEye {
            RightEye {
                color_0_deg: self.color_0_deg.unwrap_or_default(),
                color_45_deg: self.color_45_deg.unwrap_or_default(),
                color_90_deg: self.color_90_deg.unwrap_or_default(),
                color_135_deg: self.color_135_deg.unwrap_or_default(),
                color_180_deg: self.color_180_deg.unwrap_or_default(),
                color_225_deg: self.color_225_deg.unwrap_or_default(),
                color_270_deg: self.color_270_deg.unwrap_or_default(),
                color_315_deg: self.color_315_deg.unwrap_or_default(),
            }
        }
    }
    impl RightEye {
        pub fn builder() -> RightEyeBuilder {
            RightEyeBuilder::default()
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for RightEye {
        #[inline]
        fn clone(&self) -> RightEye {
            RightEye {
                color_0_deg: ::core::clone::Clone::clone(&self.color_0_deg),
                color_45_deg: ::core::clone::Clone::clone(&self.color_45_deg),
                color_90_deg: ::core::clone::Clone::clone(&self.color_90_deg),
                color_135_deg: ::core::clone::Clone::clone(&self.color_135_deg),
                color_180_deg: ::core::clone::Clone::clone(&self.color_180_deg),
                color_225_deg: ::core::clone::Clone::clone(&self.color_225_deg),
                color_270_deg: ::core::clone::Clone::clone(&self.color_270_deg),
                color_315_deg: ::core::clone::Clone::clone(&self.color_315_deg),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for RightEye {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "color_0_deg",
                "color_45_deg",
                "color_90_deg",
                "color_135_deg",
                "color_180_deg",
                "color_225_deg",
                "color_270_deg",
                "color_315_deg",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.color_0_deg,
                &self.color_45_deg,
                &self.color_90_deg,
                &self.color_135_deg,
                &self.color_180_deg,
                &self.color_225_deg,
                &self.color_270_deg,
                &&self.color_315_deg,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "RightEye",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for RightEye {
        #[inline]
        fn default() -> RightEye {
            RightEye {
                color_0_deg: ::core::default::Default::default(),
                color_45_deg: ::core::default::Default::default(),
                color_90_deg: ::core::default::Default::default(),
                color_135_deg: ::core::default::Default::default(),
                color_180_deg: ::core::default::Default::default(),
                color_225_deg: ::core::default::Default::default(),
                color_270_deg: ::core::default::Default::default(),
                color_315_deg: ::core::default::Default::default(),
            }
        }
    }
    impl FillExt<Color> for RightEye {
        fn fill(color: Color) -> RightEye {
            RightEye {
                color_0_deg: color,
                color_45_deg: color,
                color_90_deg: color,
                color_135_deg: color,
                color_180_deg: color,
                color_225_deg: color,
                color_270_deg: color,
                color_315_deg: color,
            }
        }
    }
    /// Struct containing values of type `T` for all the joints
    pub struct JointArray<T> {
        /// The yaw joint of the robot's head, allowing rotation horizontally.
        pub head_yaw: T,
        /// The pitch joint of the robot's head, allowing tilting up and down.
        pub head_pitch: T,
        /// The pitch joint of the left shoulder, controlling its vertical movement.
        pub left_shoulder_pitch: T,
        /// The roll joint of the left shoulder, controlling its horizontal movement.
        pub left_shoulder_roll: T,
        /// The yaw joint of the left elbow, allowing rotation.
        pub left_elbow_yaw: T,
        /// The roll joint of the left elbow, controlling its horizontal movement.
        pub left_elbow_roll: T,
        /// The yaw joint of the left wrist, allowing rotation.
        pub left_wrist_yaw: T,
        /// The yaw-pitch joint of the left hip, controlling horizontal and vertical movement.
        pub left_hip_yaw_pitch: T,
        /// The roll joint of the left hip, controlling its horizontal movement.
        pub left_hip_roll: T,
        /// The pitch joint of the left hip, controlling its vertical movement.
        pub left_hip_pitch: T,
        /// The pitch joint of the left knee, controlling its bending movement.
        pub left_knee_pitch: T,
        /// The pitch joint of the left ankle, controlling its bending movement.
        pub left_ankle_pitch: T,
        /// The roll joint of the left ankle, controlling its horizontal movement.
        pub left_ankle_roll: T,
        /// The pitch joint of the right shoulder, controlling its vertical movement.
        pub right_shoulder_pitch: T,
        /// The roll joint of the right shoulder, controlling its horizontal movement.
        pub right_shoulder_roll: T,
        /// The yaw joint of the right elbow, allowing rotation.
        pub right_elbow_yaw: T,
        /// The roll joint of the right elbow, controlling its horizontal movement.
        pub right_elbow_roll: T,
        /// The yaw joint of the right wrist, allowing rotation.
        pub right_wrist_yaw: T,
        /// The roll joint of the right hip, controlling its horizontal movement.
        pub right_hip_roll: T,
        /// The pitch joint of the right hip, controlling its vertical movement.
        pub right_hip_pitch: T,
        /// The pitch joint of the right knee, controlling its bending movement.
        pub right_knee_pitch: T,
        /// The pitch joint of the right ankle, controlling its bending movement.
        pub right_ankle_pitch: T,
        /// The roll joint of the right ankle, controlling its horizontal movement.
        pub right_ankle_roll: T,
        /// The joint representing the left hand.
        pub left_hand: T,
        /// The joint representing the right hand.
        pub right_hand: T,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<T> _serde::Serialize for JointArray<T>
        where
            T: _serde::Serialize,
        {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "JointArray",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "head_yaw",
                    &self.head_yaw,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "head_pitch",
                    &self.head_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_shoulder_pitch",
                    &self.left_shoulder_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_shoulder_roll",
                    &self.left_shoulder_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_elbow_yaw",
                    &self.left_elbow_yaw,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_elbow_roll",
                    &self.left_elbow_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_wrist_yaw",
                    &self.left_wrist_yaw,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_hip_yaw_pitch",
                    &self.left_hip_yaw_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_hip_roll",
                    &self.left_hip_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_hip_pitch",
                    &self.left_hip_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_knee_pitch",
                    &self.left_knee_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_ankle_pitch",
                    &self.left_ankle_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_ankle_roll",
                    &self.left_ankle_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_shoulder_pitch",
                    &self.right_shoulder_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_shoulder_roll",
                    &self.right_shoulder_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_elbow_yaw",
                    &self.right_elbow_yaw,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_elbow_roll",
                    &self.right_elbow_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_wrist_yaw",
                    &self.right_wrist_yaw,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_hip_roll",
                    &self.right_hip_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_hip_pitch",
                    &self.right_hip_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_knee_pitch",
                    &self.right_knee_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_ankle_pitch",
                    &self.right_ankle_pitch,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_ankle_roll",
                    &self.right_ankle_roll,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_hand",
                    &self.left_hand,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_hand",
                    &self.right_hand,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de, T> _serde::Deserialize<'de> for JointArray<T>
        where
            T: _serde::Deserialize<'de>,
        {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __field14,
                    __field15,
                    __field16,
                    __field17,
                    __field18,
                    __field19,
                    __field20,
                    __field21,
                    __field22,
                    __field23,
                    __field24,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            14u64 => _serde::__private::Ok(__Field::__field14),
                            15u64 => _serde::__private::Ok(__Field::__field15),
                            16u64 => _serde::__private::Ok(__Field::__field16),
                            17u64 => _serde::__private::Ok(__Field::__field17),
                            18u64 => _serde::__private::Ok(__Field::__field18),
                            19u64 => _serde::__private::Ok(__Field::__field19),
                            20u64 => _serde::__private::Ok(__Field::__field20),
                            21u64 => _serde::__private::Ok(__Field::__field21),
                            22u64 => _serde::__private::Ok(__Field::__field22),
                            23u64 => _serde::__private::Ok(__Field::__field23),
                            24u64 => _serde::__private::Ok(__Field::__field24),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "head_yaw" => _serde::__private::Ok(__Field::__field0),
                            "head_pitch" => _serde::__private::Ok(__Field::__field1),
                            "left_shoulder_pitch" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "left_shoulder_roll" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "left_elbow_yaw" => _serde::__private::Ok(__Field::__field4),
                            "left_elbow_roll" => _serde::__private::Ok(__Field::__field5),
                            "left_wrist_yaw" => _serde::__private::Ok(__Field::__field6),
                            "left_hip_yaw_pitch" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            "left_hip_roll" => _serde::__private::Ok(__Field::__field8),
                            "left_hip_pitch" => _serde::__private::Ok(__Field::__field9),
                            "left_knee_pitch" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            "left_ankle_pitch" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            "left_ankle_roll" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            "right_shoulder_pitch" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            "right_shoulder_roll" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            "right_elbow_yaw" => {
                                _serde::__private::Ok(__Field::__field15)
                            }
                            "right_elbow_roll" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            "right_wrist_yaw" => {
                                _serde::__private::Ok(__Field::__field17)
                            }
                            "right_hip_roll" => _serde::__private::Ok(__Field::__field18),
                            "right_hip_pitch" => {
                                _serde::__private::Ok(__Field::__field19)
                            }
                            "right_knee_pitch" => {
                                _serde::__private::Ok(__Field::__field20)
                            }
                            "right_ankle_pitch" => {
                                _serde::__private::Ok(__Field::__field21)
                            }
                            "right_ankle_roll" => {
                                _serde::__private::Ok(__Field::__field22)
                            }
                            "left_hand" => _serde::__private::Ok(__Field::__field23),
                            "right_hand" => _serde::__private::Ok(__Field::__field24),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"head_yaw" => _serde::__private::Ok(__Field::__field0),
                            b"head_pitch" => _serde::__private::Ok(__Field::__field1),
                            b"left_shoulder_pitch" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"left_shoulder_roll" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"left_elbow_yaw" => _serde::__private::Ok(__Field::__field4),
                            b"left_elbow_roll" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"left_wrist_yaw" => _serde::__private::Ok(__Field::__field6),
                            b"left_hip_yaw_pitch" => {
                                _serde::__private::Ok(__Field::__field7)
                            }
                            b"left_hip_roll" => _serde::__private::Ok(__Field::__field8),
                            b"left_hip_pitch" => _serde::__private::Ok(__Field::__field9),
                            b"left_knee_pitch" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            b"left_ankle_pitch" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            b"left_ankle_roll" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            b"right_shoulder_pitch" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            b"right_shoulder_roll" => {
                                _serde::__private::Ok(__Field::__field14)
                            }
                            b"right_elbow_yaw" => {
                                _serde::__private::Ok(__Field::__field15)
                            }
                            b"right_elbow_roll" => {
                                _serde::__private::Ok(__Field::__field16)
                            }
                            b"right_wrist_yaw" => {
                                _serde::__private::Ok(__Field::__field17)
                            }
                            b"right_hip_roll" => {
                                _serde::__private::Ok(__Field::__field18)
                            }
                            b"right_hip_pitch" => {
                                _serde::__private::Ok(__Field::__field19)
                            }
                            b"right_knee_pitch" => {
                                _serde::__private::Ok(__Field::__field20)
                            }
                            b"right_ankle_pitch" => {
                                _serde::__private::Ok(__Field::__field21)
                            }
                            b"right_ankle_roll" => {
                                _serde::__private::Ok(__Field::__field22)
                            }
                            b"left_hand" => _serde::__private::Ok(__Field::__field23),
                            b"right_hand" => _serde::__private::Ok(__Field::__field24),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de, T>
                where
                    T: _serde::Deserialize<'de>,
                {
                    marker: _serde::__private::PhantomData<JointArray<T>>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de, T> _serde::de::Visitor<'de> for __Visitor<'de, T>
                where
                    T: _serde::Deserialize<'de>,
                {
                    type Value = JointArray<T>;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct JointArray",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field14 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        14usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field15 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        15usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field16 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        16usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field17 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        17usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field18 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        18usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field19 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        19usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field20 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        20usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field21 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        21usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field22 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        22usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field23 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        23usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        let __field24 = match match _serde::de::SeqAccess::next_element::<
                            T,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        24usize,
                                        &"struct JointArray with 25 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(JointArray {
                            head_yaw: __field0,
                            head_pitch: __field1,
                            left_shoulder_pitch: __field2,
                            left_shoulder_roll: __field3,
                            left_elbow_yaw: __field4,
                            left_elbow_roll: __field5,
                            left_wrist_yaw: __field6,
                            left_hip_yaw_pitch: __field7,
                            left_hip_roll: __field8,
                            left_hip_pitch: __field9,
                            left_knee_pitch: __field10,
                            left_ankle_pitch: __field11,
                            left_ankle_roll: __field12,
                            right_shoulder_pitch: __field13,
                            right_shoulder_roll: __field14,
                            right_elbow_yaw: __field15,
                            right_elbow_roll: __field16,
                            right_wrist_yaw: __field17,
                            right_hip_roll: __field18,
                            right_hip_pitch: __field19,
                            right_knee_pitch: __field20,
                            right_ankle_pitch: __field21,
                            right_ankle_roll: __field22,
                            left_hand: __field23,
                            right_hand: __field24,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field14: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field15: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field16: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field17: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field18: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field19: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field20: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field21: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field22: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field23: _serde::__private::Option<T> = _serde::__private::None;
                        let mut __field24: _serde::__private::Option<T> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "head_yaw",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "head_pitch",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_shoulder_pitch",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_shoulder_roll",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_elbow_yaw",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_elbow_roll",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_wrist_yaw",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_hip_yaw_pitch",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_hip_roll",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_hip_pitch",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_knee_pitch",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_ankle_pitch",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_ankle_roll",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_shoulder_pitch",
                                            ),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field14 => {
                                    if _serde::__private::Option::is_some(&__field14) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_shoulder_roll",
                                            ),
                                        );
                                    }
                                    __field14 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field15 => {
                                    if _serde::__private::Option::is_some(&__field15) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_elbow_yaw",
                                            ),
                                        );
                                    }
                                    __field15 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field16 => {
                                    if _serde::__private::Option::is_some(&__field16) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_elbow_roll",
                                            ),
                                        );
                                    }
                                    __field16 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field17 => {
                                    if _serde::__private::Option::is_some(&__field17) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_wrist_yaw",
                                            ),
                                        );
                                    }
                                    __field17 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field18 => {
                                    if _serde::__private::Option::is_some(&__field18) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_hip_roll",
                                            ),
                                        );
                                    }
                                    __field18 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field19 => {
                                    if _serde::__private::Option::is_some(&__field19) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_hip_pitch",
                                            ),
                                        );
                                    }
                                    __field19 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field20 => {
                                    if _serde::__private::Option::is_some(&__field20) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_knee_pitch",
                                            ),
                                        );
                                    }
                                    __field20 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field21 => {
                                    if _serde::__private::Option::is_some(&__field21) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_ankle_pitch",
                                            ),
                                        );
                                    }
                                    __field21 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field22 => {
                                    if _serde::__private::Option::is_some(&__field22) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_ankle_roll",
                                            ),
                                        );
                                    }
                                    __field22 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field23 => {
                                    if _serde::__private::Option::is_some(&__field23) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_hand",
                                            ),
                                        );
                                    }
                                    __field23 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field24 => {
                                    if _serde::__private::Option::is_some(&__field24) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_hand",
                                            ),
                                        );
                                    }
                                    __field24 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<T>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("head_yaw") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("head_pitch") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_shoulder_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_shoulder_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_elbow_yaw",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_elbow_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_wrist_yaw",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_hip_yaw_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_hip_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_hip_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_knee_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_ankle_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_ankle_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_shoulder_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field14 = match __field14 {
                            _serde::__private::Some(__field14) => __field14,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_shoulder_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field15 = match __field15 {
                            _serde::__private::Some(__field15) => __field15,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_elbow_yaw",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field16 = match __field16 {
                            _serde::__private::Some(__field16) => __field16,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_elbow_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field17 = match __field17 {
                            _serde::__private::Some(__field17) => __field17,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_wrist_yaw",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field18 = match __field18 {
                            _serde::__private::Some(__field18) => __field18,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_hip_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field19 = match __field19 {
                            _serde::__private::Some(__field19) => __field19,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_hip_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field20 = match __field20 {
                            _serde::__private::Some(__field20) => __field20,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_knee_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field21 = match __field21 {
                            _serde::__private::Some(__field21) => __field21,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_ankle_pitch",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field22 = match __field22 {
                            _serde::__private::Some(__field22) => __field22,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_ankle_roll",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field23 = match __field23 {
                            _serde::__private::Some(__field23) => __field23,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left_hand") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field24 = match __field24 {
                            _serde::__private::Some(__field24) => __field24,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("right_hand") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(JointArray {
                            head_yaw: __field0,
                            head_pitch: __field1,
                            left_shoulder_pitch: __field2,
                            left_shoulder_roll: __field3,
                            left_elbow_yaw: __field4,
                            left_elbow_roll: __field5,
                            left_wrist_yaw: __field6,
                            left_hip_yaw_pitch: __field7,
                            left_hip_roll: __field8,
                            left_hip_pitch: __field9,
                            left_knee_pitch: __field10,
                            left_ankle_pitch: __field11,
                            left_ankle_roll: __field12,
                            right_shoulder_pitch: __field13,
                            right_shoulder_roll: __field14,
                            right_elbow_yaw: __field15,
                            right_elbow_roll: __field16,
                            right_wrist_yaw: __field17,
                            right_hip_roll: __field18,
                            right_hip_pitch: __field19,
                            right_knee_pitch: __field20,
                            right_ankle_pitch: __field21,
                            right_ankle_roll: __field22,
                            left_hand: __field23,
                            right_hand: __field24,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "head_yaw",
                    "head_pitch",
                    "left_shoulder_pitch",
                    "left_shoulder_roll",
                    "left_elbow_yaw",
                    "left_elbow_roll",
                    "left_wrist_yaw",
                    "left_hip_yaw_pitch",
                    "left_hip_roll",
                    "left_hip_pitch",
                    "left_knee_pitch",
                    "left_ankle_pitch",
                    "left_ankle_roll",
                    "right_shoulder_pitch",
                    "right_shoulder_roll",
                    "right_elbow_yaw",
                    "right_elbow_roll",
                    "right_wrist_yaw",
                    "right_hip_roll",
                    "right_hip_pitch",
                    "right_knee_pitch",
                    "right_ankle_pitch",
                    "right_ankle_roll",
                    "left_hand",
                    "right_hand",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "JointArray",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<JointArray<T>>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`JointArray`].
    #[must_use]
    pub struct JointArrayBuilder<T> {
        head_yaw: Option<T>,
        head_pitch: Option<T>,
        left_shoulder_pitch: Option<T>,
        left_shoulder_roll: Option<T>,
        left_elbow_yaw: Option<T>,
        left_elbow_roll: Option<T>,
        left_wrist_yaw: Option<T>,
        left_hip_yaw_pitch: Option<T>,
        left_hip_roll: Option<T>,
        left_hip_pitch: Option<T>,
        left_knee_pitch: Option<T>,
        left_ankle_pitch: Option<T>,
        left_ankle_roll: Option<T>,
        right_shoulder_pitch: Option<T>,
        right_shoulder_roll: Option<T>,
        right_elbow_yaw: Option<T>,
        right_elbow_roll: Option<T>,
        right_wrist_yaw: Option<T>,
        right_hip_roll: Option<T>,
        right_hip_pitch: Option<T>,
        right_knee_pitch: Option<T>,
        right_ankle_pitch: Option<T>,
        right_ankle_roll: Option<T>,
        left_hand: Option<T>,
        right_hand: Option<T>,
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for JointArrayBuilder<T> {
        #[inline]
        fn default() -> JointArrayBuilder<T> {
            JointArrayBuilder {
                head_yaw: ::core::default::Default::default(),
                head_pitch: ::core::default::Default::default(),
                left_shoulder_pitch: ::core::default::Default::default(),
                left_shoulder_roll: ::core::default::Default::default(),
                left_elbow_yaw: ::core::default::Default::default(),
                left_elbow_roll: ::core::default::Default::default(),
                left_wrist_yaw: ::core::default::Default::default(),
                left_hip_yaw_pitch: ::core::default::Default::default(),
                left_hip_roll: ::core::default::Default::default(),
                left_hip_pitch: ::core::default::Default::default(),
                left_knee_pitch: ::core::default::Default::default(),
                left_ankle_pitch: ::core::default::Default::default(),
                left_ankle_roll: ::core::default::Default::default(),
                right_shoulder_pitch: ::core::default::Default::default(),
                right_shoulder_roll: ::core::default::Default::default(),
                right_elbow_yaw: ::core::default::Default::default(),
                right_elbow_roll: ::core::default::Default::default(),
                right_wrist_yaw: ::core::default::Default::default(),
                right_hip_roll: ::core::default::Default::default(),
                right_hip_pitch: ::core::default::Default::default(),
                right_knee_pitch: ::core::default::Default::default(),
                right_ankle_pitch: ::core::default::Default::default(),
                right_ankle_roll: ::core::default::Default::default(),
                left_hand: ::core::default::Default::default(),
                right_hand: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Default> JointArrayBuilder<T> {
        ///Set the `head_yaw` value to the provided value.
        pub fn head_yaw(mut self, head_yaw: T) -> Self {
            self.head_yaw = Some(head_yaw);
            self
        }
        ///Set the `head_pitch` value to the provided value.
        pub fn head_pitch(mut self, head_pitch: T) -> Self {
            self.head_pitch = Some(head_pitch);
            self
        }
        ///Set the `left_shoulder_pitch` value to the provided value.
        pub fn left_shoulder_pitch(mut self, left_shoulder_pitch: T) -> Self {
            self.left_shoulder_pitch = Some(left_shoulder_pitch);
            self
        }
        ///Set the `left_shoulder_roll` value to the provided value.
        pub fn left_shoulder_roll(mut self, left_shoulder_roll: T) -> Self {
            self.left_shoulder_roll = Some(left_shoulder_roll);
            self
        }
        ///Set the `left_elbow_yaw` value to the provided value.
        pub fn left_elbow_yaw(mut self, left_elbow_yaw: T) -> Self {
            self.left_elbow_yaw = Some(left_elbow_yaw);
            self
        }
        ///Set the `left_elbow_roll` value to the provided value.
        pub fn left_elbow_roll(mut self, left_elbow_roll: T) -> Self {
            self.left_elbow_roll = Some(left_elbow_roll);
            self
        }
        ///Set the `left_wrist_yaw` value to the provided value.
        pub fn left_wrist_yaw(mut self, left_wrist_yaw: T) -> Self {
            self.left_wrist_yaw = Some(left_wrist_yaw);
            self
        }
        ///Set the `left_hip_yaw_pitch` value to the provided value.
        pub fn left_hip_yaw_pitch(mut self, left_hip_yaw_pitch: T) -> Self {
            self.left_hip_yaw_pitch = Some(left_hip_yaw_pitch);
            self
        }
        ///Set the `left_hip_roll` value to the provided value.
        pub fn left_hip_roll(mut self, left_hip_roll: T) -> Self {
            self.left_hip_roll = Some(left_hip_roll);
            self
        }
        ///Set the `left_hip_pitch` value to the provided value.
        pub fn left_hip_pitch(mut self, left_hip_pitch: T) -> Self {
            self.left_hip_pitch = Some(left_hip_pitch);
            self
        }
        ///Set the `left_knee_pitch` value to the provided value.
        pub fn left_knee_pitch(mut self, left_knee_pitch: T) -> Self {
            self.left_knee_pitch = Some(left_knee_pitch);
            self
        }
        ///Set the `left_ankle_pitch` value to the provided value.
        pub fn left_ankle_pitch(mut self, left_ankle_pitch: T) -> Self {
            self.left_ankle_pitch = Some(left_ankle_pitch);
            self
        }
        ///Set the `left_ankle_roll` value to the provided value.
        pub fn left_ankle_roll(mut self, left_ankle_roll: T) -> Self {
            self.left_ankle_roll = Some(left_ankle_roll);
            self
        }
        ///Set the `right_shoulder_pitch` value to the provided value.
        pub fn right_shoulder_pitch(mut self, right_shoulder_pitch: T) -> Self {
            self.right_shoulder_pitch = Some(right_shoulder_pitch);
            self
        }
        ///Set the `right_shoulder_roll` value to the provided value.
        pub fn right_shoulder_roll(mut self, right_shoulder_roll: T) -> Self {
            self.right_shoulder_roll = Some(right_shoulder_roll);
            self
        }
        ///Set the `right_elbow_yaw` value to the provided value.
        pub fn right_elbow_yaw(mut self, right_elbow_yaw: T) -> Self {
            self.right_elbow_yaw = Some(right_elbow_yaw);
            self
        }
        ///Set the `right_elbow_roll` value to the provided value.
        pub fn right_elbow_roll(mut self, right_elbow_roll: T) -> Self {
            self.right_elbow_roll = Some(right_elbow_roll);
            self
        }
        ///Set the `right_wrist_yaw` value to the provided value.
        pub fn right_wrist_yaw(mut self, right_wrist_yaw: T) -> Self {
            self.right_wrist_yaw = Some(right_wrist_yaw);
            self
        }
        ///Set the `right_hip_roll` value to the provided value.
        pub fn right_hip_roll(mut self, right_hip_roll: T) -> Self {
            self.right_hip_roll = Some(right_hip_roll);
            self
        }
        ///Set the `right_hip_pitch` value to the provided value.
        pub fn right_hip_pitch(mut self, right_hip_pitch: T) -> Self {
            self.right_hip_pitch = Some(right_hip_pitch);
            self
        }
        ///Set the `right_knee_pitch` value to the provided value.
        pub fn right_knee_pitch(mut self, right_knee_pitch: T) -> Self {
            self.right_knee_pitch = Some(right_knee_pitch);
            self
        }
        ///Set the `right_ankle_pitch` value to the provided value.
        pub fn right_ankle_pitch(mut self, right_ankle_pitch: T) -> Self {
            self.right_ankle_pitch = Some(right_ankle_pitch);
            self
        }
        ///Set the `right_ankle_roll` value to the provided value.
        pub fn right_ankle_roll(mut self, right_ankle_roll: T) -> Self {
            self.right_ankle_roll = Some(right_ankle_roll);
            self
        }
        ///Set the `left_hand` value to the provided value.
        pub fn left_hand(mut self, left_hand: T) -> Self {
            self.left_hand = Some(left_hand);
            self
        }
        ///Set the `right_hand` value to the provided value.
        pub fn right_hand(mut self, right_hand: T) -> Self {
            self.right_hand = Some(right_hand);
            self
        }
        /**Use the provided values to build a new instance of [`JointArray`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> JointArray<T> {
            JointArray {
                head_yaw: self.head_yaw.unwrap_or_default(),
                head_pitch: self.head_pitch.unwrap_or_default(),
                left_shoulder_pitch: self.left_shoulder_pitch.unwrap_or_default(),
                left_shoulder_roll: self.left_shoulder_roll.unwrap_or_default(),
                left_elbow_yaw: self.left_elbow_yaw.unwrap_or_default(),
                left_elbow_roll: self.left_elbow_roll.unwrap_or_default(),
                left_wrist_yaw: self.left_wrist_yaw.unwrap_or_default(),
                left_hip_yaw_pitch: self.left_hip_yaw_pitch.unwrap_or_default(),
                left_hip_roll: self.left_hip_roll.unwrap_or_default(),
                left_hip_pitch: self.left_hip_pitch.unwrap_or_default(),
                left_knee_pitch: self.left_knee_pitch.unwrap_or_default(),
                left_ankle_pitch: self.left_ankle_pitch.unwrap_or_default(),
                left_ankle_roll: self.left_ankle_roll.unwrap_or_default(),
                right_shoulder_pitch: self.right_shoulder_pitch.unwrap_or_default(),
                right_shoulder_roll: self.right_shoulder_roll.unwrap_or_default(),
                right_elbow_yaw: self.right_elbow_yaw.unwrap_or_default(),
                right_elbow_roll: self.right_elbow_roll.unwrap_or_default(),
                right_wrist_yaw: self.right_wrist_yaw.unwrap_or_default(),
                right_hip_roll: self.right_hip_roll.unwrap_or_default(),
                right_hip_pitch: self.right_hip_pitch.unwrap_or_default(),
                right_knee_pitch: self.right_knee_pitch.unwrap_or_default(),
                right_ankle_pitch: self.right_ankle_pitch.unwrap_or_default(),
                right_ankle_roll: self.right_ankle_roll.unwrap_or_default(),
                left_hand: self.left_hand.unwrap_or_default(),
                right_hand: self.right_hand.unwrap_or_default(),
            }
        }
    }
    impl<T: Default> JointArray<T> {
        pub fn builder() -> JointArrayBuilder<T> {
            JointArrayBuilder::<T>::default()
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for JointArray<T> {
        #[inline]
        fn clone(&self) -> JointArray<T> {
            JointArray {
                head_yaw: ::core::clone::Clone::clone(&self.head_yaw),
                head_pitch: ::core::clone::Clone::clone(&self.head_pitch),
                left_shoulder_pitch: ::core::clone::Clone::clone(
                    &self.left_shoulder_pitch,
                ),
                left_shoulder_roll: ::core::clone::Clone::clone(
                    &self.left_shoulder_roll,
                ),
                left_elbow_yaw: ::core::clone::Clone::clone(&self.left_elbow_yaw),
                left_elbow_roll: ::core::clone::Clone::clone(&self.left_elbow_roll),
                left_wrist_yaw: ::core::clone::Clone::clone(&self.left_wrist_yaw),
                left_hip_yaw_pitch: ::core::clone::Clone::clone(
                    &self.left_hip_yaw_pitch,
                ),
                left_hip_roll: ::core::clone::Clone::clone(&self.left_hip_roll),
                left_hip_pitch: ::core::clone::Clone::clone(&self.left_hip_pitch),
                left_knee_pitch: ::core::clone::Clone::clone(&self.left_knee_pitch),
                left_ankle_pitch: ::core::clone::Clone::clone(&self.left_ankle_pitch),
                left_ankle_roll: ::core::clone::Clone::clone(&self.left_ankle_roll),
                right_shoulder_pitch: ::core::clone::Clone::clone(
                    &self.right_shoulder_pitch,
                ),
                right_shoulder_roll: ::core::clone::Clone::clone(
                    &self.right_shoulder_roll,
                ),
                right_elbow_yaw: ::core::clone::Clone::clone(&self.right_elbow_yaw),
                right_elbow_roll: ::core::clone::Clone::clone(&self.right_elbow_roll),
                right_wrist_yaw: ::core::clone::Clone::clone(&self.right_wrist_yaw),
                right_hip_roll: ::core::clone::Clone::clone(&self.right_hip_roll),
                right_hip_pitch: ::core::clone::Clone::clone(&self.right_hip_pitch),
                right_knee_pitch: ::core::clone::Clone::clone(&self.right_knee_pitch),
                right_ankle_pitch: ::core::clone::Clone::clone(&self.right_ankle_pitch),
                right_ankle_roll: ::core::clone::Clone::clone(&self.right_ankle_roll),
                left_hand: ::core::clone::Clone::clone(&self.left_hand),
                right_hand: ::core::clone::Clone::clone(&self.right_hand),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for JointArray<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "head_yaw",
                "head_pitch",
                "left_shoulder_pitch",
                "left_shoulder_roll",
                "left_elbow_yaw",
                "left_elbow_roll",
                "left_wrist_yaw",
                "left_hip_yaw_pitch",
                "left_hip_roll",
                "left_hip_pitch",
                "left_knee_pitch",
                "left_ankle_pitch",
                "left_ankle_roll",
                "right_shoulder_pitch",
                "right_shoulder_roll",
                "right_elbow_yaw",
                "right_elbow_roll",
                "right_wrist_yaw",
                "right_hip_roll",
                "right_hip_pitch",
                "right_knee_pitch",
                "right_ankle_pitch",
                "right_ankle_roll",
                "left_hand",
                "right_hand",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.head_yaw,
                &self.head_pitch,
                &self.left_shoulder_pitch,
                &self.left_shoulder_roll,
                &self.left_elbow_yaw,
                &self.left_elbow_roll,
                &self.left_wrist_yaw,
                &self.left_hip_yaw_pitch,
                &self.left_hip_roll,
                &self.left_hip_pitch,
                &self.left_knee_pitch,
                &self.left_ankle_pitch,
                &self.left_ankle_roll,
                &self.right_shoulder_pitch,
                &self.right_shoulder_roll,
                &self.right_elbow_yaw,
                &self.right_elbow_roll,
                &self.right_wrist_yaw,
                &self.right_hip_roll,
                &self.right_hip_pitch,
                &self.right_knee_pitch,
                &self.right_ankle_pitch,
                &self.right_ankle_roll,
                &self.left_hand,
                &&self.right_hand,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "JointArray",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for JointArray<T> {
        #[inline]
        fn default() -> JointArray<T> {
            JointArray {
                head_yaw: ::core::default::Default::default(),
                head_pitch: ::core::default::Default::default(),
                left_shoulder_pitch: ::core::default::Default::default(),
                left_shoulder_roll: ::core::default::Default::default(),
                left_elbow_yaw: ::core::default::Default::default(),
                left_elbow_roll: ::core::default::Default::default(),
                left_wrist_yaw: ::core::default::Default::default(),
                left_hip_yaw_pitch: ::core::default::Default::default(),
                left_hip_roll: ::core::default::Default::default(),
                left_hip_pitch: ::core::default::Default::default(),
                left_knee_pitch: ::core::default::Default::default(),
                left_ankle_pitch: ::core::default::Default::default(),
                left_ankle_roll: ::core::default::Default::default(),
                right_shoulder_pitch: ::core::default::Default::default(),
                right_shoulder_roll: ::core::default::Default::default(),
                right_elbow_yaw: ::core::default::Default::default(),
                right_elbow_roll: ::core::default::Default::default(),
                right_wrist_yaw: ::core::default::Default::default(),
                right_hip_roll: ::core::default::Default::default(),
                right_hip_pitch: ::core::default::Default::default(),
                right_knee_pitch: ::core::default::Default::default(),
                right_ankle_pitch: ::core::default::Default::default(),
                right_ankle_roll: ::core::default::Default::default(),
                left_hand: ::core::default::Default::default(),
                right_hand: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Clone> JointArray<T> {
        pub fn to_vec(&self) -> std::vec::Vec<T> {
            <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    self.head_yaw.clone(),
                    self.head_pitch.clone(),
                    self.left_shoulder_pitch.clone(),
                    self.left_shoulder_roll.clone(),
                    self.left_elbow_yaw.clone(),
                    self.left_elbow_roll.clone(),
                    self.left_wrist_yaw.clone(),
                    self.left_hip_yaw_pitch.clone(),
                    self.left_hip_roll.clone(),
                    self.left_hip_pitch.clone(),
                    self.left_knee_pitch.clone(),
                    self.left_ankle_pitch.clone(),
                    self.left_ankle_roll.clone(),
                    self.right_shoulder_pitch.clone(),
                    self.right_shoulder_roll.clone(),
                    self.right_elbow_yaw.clone(),
                    self.right_elbow_roll.clone(),
                    self.right_wrist_yaw.clone(),
                    self.right_hip_roll.clone(),
                    self.right_hip_pitch.clone(),
                    self.right_knee_pitch.clone(),
                    self.right_ankle_pitch.clone(),
                    self.right_ankle_roll.clone(),
                    self.left_hand.clone(),
                    self.right_hand.clone(),
                ]),
            )
        }
    }
    impl<T: Clone> std::iter::IntoIterator for JointArray<T> {
        type Item = T;
        type IntoIter = std::vec::IntoIter<Self::Item>;
        fn into_iter(self) -> std::vec::IntoIter<T> {
            <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        self.head_yaw.clone(),
                        self.head_pitch.clone(),
                        self.left_shoulder_pitch.clone(),
                        self.left_shoulder_roll.clone(),
                        self.left_elbow_yaw.clone(),
                        self.left_elbow_roll.clone(),
                        self.left_wrist_yaw.clone(),
                        self.left_hip_yaw_pitch.clone(),
                        self.left_hip_roll.clone(),
                        self.left_hip_pitch.clone(),
                        self.left_knee_pitch.clone(),
                        self.left_ankle_pitch.clone(),
                        self.left_ankle_roll.clone(),
                        self.right_shoulder_pitch.clone(),
                        self.right_shoulder_roll.clone(),
                        self.right_elbow_yaw.clone(),
                        self.right_elbow_roll.clone(),
                        self.right_wrist_yaw.clone(),
                        self.right_hip_roll.clone(),
                        self.right_hip_pitch.clone(),
                        self.right_knee_pitch.clone(),
                        self.right_ankle_pitch.clone(),
                        self.right_ankle_roll.clone(),
                        self.left_hand.clone(),
                        self.right_hand.clone(),
                    ]),
                )
                .into_iter()
        }
    }
    impl<T> FromIterator<T> for JointArray<T> {
        fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
            let t: [T; 25usize];
            let mut i = 0;
            for item in iter {
                t[i] = item;
                i += 1;
            }
            let [head_yaw, head_pitch, left_shoulder_pitch, left_shoulder_roll,
            left_elbow_yaw, left_elbow_roll, left_wrist_yaw, left_hip_yaw_pitch,
            left_hip_roll, left_hip_pitch, left_knee_pitch, left_ankle_pitch,
            left_ankle_roll, right_shoulder_pitch, right_shoulder_roll, right_elbow_yaw,
            right_elbow_roll, right_wrist_yaw, right_hip_roll, right_hip_pitch,
            right_knee_pitch, right_ankle_pitch, right_ankle_roll, left_hand, right_hand,
            ] = t;
            Self {
                head_yaw,
                head_pitch,
                left_shoulder_pitch,
                left_shoulder_roll,
                left_elbow_yaw,
                left_elbow_roll,
                left_wrist_yaw,
                left_hip_yaw_pitch,
                left_hip_roll,
                left_hip_pitch,
                left_knee_pitch,
                left_ankle_pitch,
                left_ankle_roll,
                right_shoulder_pitch,
                right_shoulder_roll,
                right_elbow_yaw,
                right_elbow_roll,
                right_wrist_yaw,
                right_hip_roll,
                right_hip_pitch,
                right_knee_pitch,
                right_ankle_pitch,
                right_ankle_roll,
                left_hand,
                right_hand,
            }
        }
    }
    impl<T> JointArray<T> {
        /// Consumes a `[T; 25]` to initialize a `JointArray<T>`.
        pub fn from_slice(arr: [T; 25]) -> JointArray<T> {
            let [head_yaw, head_pitch, left_shoulder_pitch, left_shoulder_roll,
            left_elbow_yaw, left_elbow_roll, left_wrist_yaw, left_hip_yaw_pitch,
            left_hip_roll, left_hip_pitch, left_knee_pitch, left_ankle_pitch,
            left_ankle_roll, right_shoulder_pitch, right_shoulder_roll, right_elbow_yaw,
            right_elbow_roll, right_wrist_yaw, right_hip_roll, right_hip_pitch,
            right_knee_pitch, right_ankle_pitch, right_ankle_roll, left_hand, right_hand,
            ] = arr;
            JointArray {
                head_yaw,
                head_pitch,
                left_shoulder_pitch,
                left_shoulder_roll,
                left_elbow_yaw,
                left_elbow_roll,
                left_wrist_yaw,
                left_hip_yaw_pitch,
                left_hip_roll,
                left_hip_pitch,
                left_knee_pitch,
                left_ankle_pitch,
                left_ankle_roll,
                right_shoulder_pitch,
                right_shoulder_roll,
                right_elbow_yaw,
                right_elbow_roll,
                right_wrist_yaw,
                right_hip_roll,
                right_hip_pitch,
                right_knee_pitch,
                right_ankle_pitch,
                right_ankle_roll,
                left_hand,
                right_hand,
            }
        }
        /// Retrieves the left leg joints.
        pub fn left_leg_joints(&self) -> LeftLegJoints<&T> {
            LeftLegJoints {
                hip_yaw_pitch: &self.left_hip_yaw_pitch,
                hip_roll: &self.left_hip_roll,
                hip_pitch: &self.left_hip_pitch,
                knee_pitch: &self.left_knee_pitch,
                ankle_pitch: &self.left_ankle_pitch,
                ankle_roll: &self.left_ankle_roll,
            }
        }
        /// Retrieves the left arm joints.
        pub fn left_arm_joints(&self) -> LeftArmJoints<&T> {
            LeftArmJoints {
                shoulder_pitch: &self.left_shoulder_pitch,
                shoulder_roll: &self.left_shoulder_roll,
                elbow_yaw: &self.left_elbow_yaw,
                elbow_roll: &self.left_elbow_roll,
                wrist_yaw: &self.left_wrist_yaw,
                hand: &self.left_hand,
            }
        }
        /// Retrieves the right leg joints.
        pub fn right_leg_joints(&self) -> RightLegJoints<&T> {
            RightLegJoints {
                hip_roll: &self.right_hip_roll,
                hip_pitch: &self.right_hip_pitch,
                knee_pitch: &self.right_knee_pitch,
                ankle_pitch: &self.right_ankle_pitch,
                ankle_roll: &self.right_ankle_roll,
            }
        }
        /// Retrieves the right arm joints.
        pub fn right_arm_joints(&self) -> RightArmJoints<&T> {
            RightArmJoints {
                shoulder_pitch: &self.right_shoulder_pitch,
                shoulder_roll: &self.right_shoulder_roll,
                elbow_yaw: &self.right_elbow_yaw,
                elbow_roll: &self.right_elbow_roll,
                wrist_yaw: &self.right_wrist_yaw,
                hand: &self.right_hand,
            }
        }
        /// Retrieves the head joints.
        pub fn head_joints(&self) -> HeadJoints<&T> {
            HeadJoints {
                yaw: &self.head_yaw,
                pitch: &self.head_pitch,
            }
        }
    }
    impl<T: Clone> FillExt<T> for JointArray<T> {
        fn fill(value: T) -> JointArray<T> {
            JointArray {
                head_yaw: value.clone(),
                head_pitch: value.clone(),
                left_shoulder_pitch: value.clone(),
                left_shoulder_roll: value.clone(),
                left_elbow_yaw: value.clone(),
                left_elbow_roll: value.clone(),
                left_wrist_yaw: value.clone(),
                left_hip_yaw_pitch: value.clone(),
                left_hip_roll: value.clone(),
                left_hip_pitch: value.clone(),
                left_knee_pitch: value.clone(),
                left_ankle_pitch: value.clone(),
                left_ankle_roll: value.clone(),
                right_shoulder_pitch: value.clone(),
                right_shoulder_roll: value.clone(),
                right_elbow_yaw: value.clone(),
                right_elbow_roll: value.clone(),
                right_wrist_yaw: value.clone(),
                right_hip_roll: value.clone(),
                right_hip_pitch: value.clone(),
                right_knee_pitch: value.clone(),
                right_ankle_pitch: value.clone(),
                right_ankle_roll: value.clone(),
                left_hand: value.clone(),
                right_hand: value.clone(),
            }
        }
    }
    /// Struct representing the battery status of the robot.
    pub struct Battery {
        /// The battery percentage
        pub charge: f32,
        /// Current emitted by battery
        pub current: f32,
        /// Unknown field
        pub status: f32,
        /// Temperature of the battery
        pub temperature: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Battery {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Battery",
                    false as usize + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "charge",
                    &self.charge,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "current",
                    &self.current,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "temperature",
                    &self.temperature,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Battery {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "charge" => _serde::__private::Ok(__Field::__field0),
                            "current" => _serde::__private::Ok(__Field::__field1),
                            "status" => _serde::__private::Ok(__Field::__field2),
                            "temperature" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"charge" => _serde::__private::Ok(__Field::__field0),
                            b"current" => _serde::__private::Ok(__Field::__field1),
                            b"status" => _serde::__private::Ok(__Field::__field2),
                            b"temperature" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Battery>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Battery;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Battery",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Battery with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Battery with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Battery with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Battery with 4 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Battery {
                            charge: __field0,
                            current: __field1,
                            status: __field2,
                            temperature: __field3,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("charge"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "current",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "temperature",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("charge") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("current") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("status") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("temperature") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Battery {
                            charge: __field0,
                            current: __field1,
                            status: __field2,
                            temperature: __field3,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "charge",
                    "current",
                    "status",
                    "temperature",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Battery",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Battery>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Battery {
        #[inline]
        fn clone(&self) -> Battery {
            Battery {
                charge: ::core::clone::Clone::clone(&self.charge),
                current: ::core::clone::Clone::clone(&self.current),
                status: ::core::clone::Clone::clone(&self.status),
                temperature: ::core::clone::Clone::clone(&self.temperature),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Battery {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field4_finish(
                f,
                "Battery",
                "charge",
                &self.charge,
                "current",
                &self.current,
                "status",
                &self.status,
                "temperature",
                &&self.temperature,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for Battery {
        #[inline]
        fn default() -> Battery {
            Battery {
                charge: ::core::default::Default::default(),
                current: ::core::default::Default::default(),
                status: ::core::default::Default::default(),
                temperature: ::core::default::Default::default(),
            }
        }
    }
    /// Struct containing the [`ForceSensitiveResistorFoot`] value for each foot.
    pub struct ForceSensitiveResistors {
        /// FSR values from the four sensors in the left foot.
        pub left_foot: ForceSensitiveResistorFoot,
        /// FSR values from the four sensors in the right foot.
        pub right_foot: ForceSensitiveResistorFoot,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for ForceSensitiveResistors {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "ForceSensitiveResistors",
                    false as usize + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_foot",
                    &self.left_foot,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_foot",
                    &self.right_foot,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for ForceSensitiveResistors {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "left_foot" => _serde::__private::Ok(__Field::__field0),
                            "right_foot" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"left_foot" => _serde::__private::Ok(__Field::__field0),
                            b"right_foot" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<ForceSensitiveResistors>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = ForceSensitiveResistors;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct ForceSensitiveResistors",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            ForceSensitiveResistorFoot,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct ForceSensitiveResistors with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            ForceSensitiveResistorFoot,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct ForceSensitiveResistors with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(ForceSensitiveResistors {
                            left_foot: __field0,
                            right_foot: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<
                            ForceSensitiveResistorFoot,
                        > = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<
                            ForceSensitiveResistorFoot,
                        > = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_foot",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            ForceSensitiveResistorFoot,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_foot",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            ForceSensitiveResistorFoot,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left_foot") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("right_foot") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(ForceSensitiveResistors {
                            left_foot: __field0,
                            right_foot: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["left_foot", "right_foot"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "ForceSensitiveResistors",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            ForceSensitiveResistors,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for ForceSensitiveResistors {
        #[inline]
        fn clone(&self) -> ForceSensitiveResistors {
            ForceSensitiveResistors {
                left_foot: ::core::clone::Clone::clone(&self.left_foot),
                right_foot: ::core::clone::Clone::clone(&self.right_foot),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ForceSensitiveResistors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "ForceSensitiveResistors",
                "left_foot",
                &self.left_foot,
                "right_foot",
                &&self.right_foot,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for ForceSensitiveResistors {
        #[inline]
        fn default() -> ForceSensitiveResistors {
            ForceSensitiveResistors {
                left_foot: ::core::default::Default::default(),
                right_foot: ::core::default::Default::default(),
            }
        }
    }
    impl ForceSensitiveResistors {
        /// Computes the sum of the FSR sensor values for both feet.
        pub fn sum(&self) -> f32 {
            self.left_foot.sum() + self.right_foot.sum()
        }
        /// Calculates the average weigth based on the measurement from the resistors in both feet.
        pub fn avg(&self) -> f32 {
            (self.left_foot.avg() + self.right_foot.avg()) / 2.0
        }
    }
    /// Struct representing the force sensitive resistors in one of the feet.
    pub struct ForceSensitiveResistorFoot {
        /// FSR value representing the estimated weight in kilograms on the front left foot sensor.
        ///
        /// Please note that this value is approximate.
        pub front_left: f32,
        /// FSR value representing the estimated weight in kilograms on the front right foot sensor.
        ///
        /// Please note that this value is approximate.
        pub front_right: f32,
        /// FSR value representing the estimated weight in kilograms on the rear left foot sensor.
        ///
        /// Please note that this value is approximate.
        pub rear_left: f32,
        /// FSR value representing the estimated weight in kilograms on the rear right foot sensor.
        ///
        /// Please note that this value is approximate.
        pub rear_right: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for ForceSensitiveResistorFoot {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "ForceSensitiveResistorFoot",
                    false as usize + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "front_left",
                    &self.front_left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "front_right",
                    &self.front_right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "rear_left",
                    &self.rear_left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "rear_right",
                    &self.rear_right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for ForceSensitiveResistorFoot {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "front_left" => _serde::__private::Ok(__Field::__field0),
                            "front_right" => _serde::__private::Ok(__Field::__field1),
                            "rear_left" => _serde::__private::Ok(__Field::__field2),
                            "rear_right" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"front_left" => _serde::__private::Ok(__Field::__field0),
                            b"front_right" => _serde::__private::Ok(__Field::__field1),
                            b"rear_left" => _serde::__private::Ok(__Field::__field2),
                            b"rear_right" => _serde::__private::Ok(__Field::__field3),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<ForceSensitiveResistorFoot>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = ForceSensitiveResistorFoot;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct ForceSensitiveResistorFoot",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct ForceSensitiveResistorFoot with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct ForceSensitiveResistorFoot with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct ForceSensitiveResistorFoot with 4 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct ForceSensitiveResistorFoot with 4 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(ForceSensitiveResistorFoot {
                            front_left: __field0,
                            front_right: __field1,
                            rear_left: __field2,
                            rear_right: __field3,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "front_left",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "front_right",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "rear_left",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "rear_right",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("front_left") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("front_right") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("rear_left") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("rear_right") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(ForceSensitiveResistorFoot {
                            front_left: __field0,
                            front_right: __field1,
                            rear_left: __field2,
                            rear_right: __field3,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "front_left",
                    "front_right",
                    "rear_left",
                    "rear_right",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "ForceSensitiveResistorFoot",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            ForceSensitiveResistorFoot,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for ForceSensitiveResistorFoot {
        #[inline]
        fn clone(&self) -> ForceSensitiveResistorFoot {
            ForceSensitiveResistorFoot {
                front_left: ::core::clone::Clone::clone(&self.front_left),
                front_right: ::core::clone::Clone::clone(&self.front_right),
                rear_left: ::core::clone::Clone::clone(&self.rear_left),
                rear_right: ::core::clone::Clone::clone(&self.rear_right),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ForceSensitiveResistorFoot {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field4_finish(
                f,
                "ForceSensitiveResistorFoot",
                "front_left",
                &self.front_left,
                "front_right",
                &self.front_right,
                "rear_left",
                &self.rear_left,
                "rear_right",
                &&self.rear_right,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for ForceSensitiveResistorFoot {
        #[inline]
        fn default() -> ForceSensitiveResistorFoot {
            ForceSensitiveResistorFoot {
                front_left: ::core::default::Default::default(),
                front_right: ::core::default::Default::default(),
                rear_left: ::core::default::Default::default(),
                rear_right: ::core::default::Default::default(),
            }
        }
    }
    impl ForceSensitiveResistorFoot {
        /// Computes the sum of the FSR sensor values for the foot.
        pub fn sum(&self) -> f32 {
            self.front_left + self.front_right + self.rear_left + self.rear_right
        }
        /// Calculates the average weight on the foot.
        pub fn avg(&self) -> f32 {
            self.sum() / 4.0
        }
    }
    /// Values read by the left and right sonar sensor.
    pub struct SonarValues {
        pub left: f32,
        pub right: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SonarValues {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "SonarValues",
                    false as usize + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left",
                    &self.left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right",
                    &self.right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SonarValues {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "left" => _serde::__private::Ok(__Field::__field0),
                            "right" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"left" => _serde::__private::Ok(__Field::__field0),
                            b"right" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SonarValues>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SonarValues;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct SonarValues",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct SonarValues with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct SonarValues with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(SonarValues {
                            left: __field0,
                            right: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("left"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("right"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("right") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(SonarValues {
                            left: __field0,
                            right: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["left", "right"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "SonarValues",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SonarValues>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`SonarValues`].
    #[must_use]
    pub struct SonarValuesBuilder {
        left: Option<f32>,
        right: Option<f32>,
    }
    #[automatically_derived]
    impl ::core::default::Default for SonarValuesBuilder {
        #[inline]
        fn default() -> SonarValuesBuilder {
            SonarValuesBuilder {
                left: ::core::default::Default::default(),
                right: ::core::default::Default::default(),
            }
        }
    }
    impl SonarValuesBuilder {
        ///Set the `left` value to the provided value.
        pub fn left(mut self, left: f32) -> Self {
            self.left = Some(left);
            self
        }
        ///Set the `right` value to the provided value.
        pub fn right(mut self, right: f32) -> Self {
            self.right = Some(right);
            self
        }
        /**Use the provided values to build a new instance of [`SonarValues`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> SonarValues {
            SonarValues {
                left: self.left.unwrap_or_default(),
                right: self.right.unwrap_or_default(),
            }
        }
    }
    impl SonarValues {
        pub fn builder() -> SonarValuesBuilder {
            SonarValuesBuilder::default()
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for SonarValues {
        #[inline]
        fn clone(&self) -> SonarValues {
            SonarValues {
                left: ::core::clone::Clone::clone(&self.left),
                right: ::core::clone::Clone::clone(&self.right),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for SonarValues {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "SonarValues",
                "left",
                &self.left,
                "right",
                &&self.right,
            )
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for SonarValues {
        #[inline]
        fn default() -> SonarValues {
            SonarValues {
                left: ::core::default::Default::default(),
                right: ::core::default::Default::default(),
            }
        }
    }
    /// Enabled state of the left and right sonar sensor.
    pub struct SonarEnabled {
        pub left: bool,
        pub right: bool,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for SonarEnabled {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "SonarEnabled",
                    false as usize + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left",
                    &self.left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right",
                    &self.right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for SonarEnabled {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "left" => _serde::__private::Ok(__Field::__field0),
                            "right" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"left" => _serde::__private::Ok(__Field::__field0),
                            b"right" => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<SonarEnabled>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = SonarEnabled;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct SonarEnabled",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct SonarEnabled with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            bool,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct SonarEnabled with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(SonarEnabled {
                            left: __field0,
                            right: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<bool> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<bool> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("left"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            bool,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("right"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            bool,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("left") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("right") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(SonarEnabled {
                            left: __field0,
                            right: __field1,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["left", "right"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "SonarEnabled",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<SonarEnabled>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    ///Builder struct for [`SonarEnabled`].
    #[must_use]
    pub struct SonarEnabledBuilder {
        left: Option<bool>,
        right: Option<bool>,
    }
    #[automatically_derived]
    impl ::core::default::Default for SonarEnabledBuilder {
        #[inline]
        fn default() -> SonarEnabledBuilder {
            SonarEnabledBuilder {
                left: ::core::default::Default::default(),
                right: ::core::default::Default::default(),
            }
        }
    }
    impl SonarEnabledBuilder {
        ///Set the `left` value to the provided value.
        pub fn left(mut self, left: bool) -> Self {
            self.left = Some(left);
            self
        }
        ///Set the `right` value to the provided value.
        pub fn right(mut self, right: bool) -> Self {
            self.right = Some(right);
            self
        }
        /**Use the provided values to build a new instance of [`SonarEnabled`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> SonarEnabled {
            SonarEnabled {
                left: self.left.unwrap_or_default(),
                right: self.right.unwrap_or_default(),
            }
        }
    }
    impl SonarEnabled {
        pub fn builder() -> SonarEnabledBuilder {
            SonarEnabledBuilder::default()
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for SonarEnabled {
        #[inline]
        fn clone(&self) -> SonarEnabled {
            SonarEnabled {
                left: ::core::clone::Clone::clone(&self.left),
                right: ::core::clone::Clone::clone(&self.right),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for SonarEnabled {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "SonarEnabled",
                "left",
                &self.left,
                "right",
                &&self.right,
            )
        }
    }
    impl Default for SonarEnabled {
        fn default() -> Self {
            Self { left: true, right: true }
        }
    }
    /// Struct containing the touch activiation value for each touch sensor on the robot.
    pub struct Touch {
        pub chest_board: f32,
        pub head_front: f32,
        pub head_middle: f32,
        pub head_rear: f32,
        pub left_foot_left: f32,
        pub left_foot_right: f32,
        pub left_hand_back: f32,
        pub left_hand_left: f32,
        pub left_hand_right: f32,
        pub right_foot_left: f32,
        pub right_foot_right: f32,
        pub right_hand_back: f32,
        pub right_hand_left: f32,
        pub right_hand_right: f32,
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Touch {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Touch",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                        + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "chest_board",
                    &self.chest_board,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "head_front",
                    &self.head_front,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "head_middle",
                    &self.head_middle,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "head_rear",
                    &self.head_rear,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_foot_left",
                    &self.left_foot_left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_foot_right",
                    &self.left_foot_right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_hand_back",
                    &self.left_hand_back,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_hand_left",
                    &self.left_hand_left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "left_hand_right",
                    &self.left_hand_right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_foot_left",
                    &self.right_foot_left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_foot_right",
                    &self.right_foot_right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_hand_back",
                    &self.right_hand_back,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_hand_left",
                    &self.right_hand_left,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "right_hand_right",
                    &self.right_hand_right,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Touch {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __field6,
                    __field7,
                    __field8,
                    __field9,
                    __field10,
                    __field11,
                    __field12,
                    __field13,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            6u64 => _serde::__private::Ok(__Field::__field6),
                            7u64 => _serde::__private::Ok(__Field::__field7),
                            8u64 => _serde::__private::Ok(__Field::__field8),
                            9u64 => _serde::__private::Ok(__Field::__field9),
                            10u64 => _serde::__private::Ok(__Field::__field10),
                            11u64 => _serde::__private::Ok(__Field::__field11),
                            12u64 => _serde::__private::Ok(__Field::__field12),
                            13u64 => _serde::__private::Ok(__Field::__field13),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "chest_board" => _serde::__private::Ok(__Field::__field0),
                            "head_front" => _serde::__private::Ok(__Field::__field1),
                            "head_middle" => _serde::__private::Ok(__Field::__field2),
                            "head_rear" => _serde::__private::Ok(__Field::__field3),
                            "left_foot_left" => _serde::__private::Ok(__Field::__field4),
                            "left_foot_right" => _serde::__private::Ok(__Field::__field5),
                            "left_hand_back" => _serde::__private::Ok(__Field::__field6),
                            "left_hand_left" => _serde::__private::Ok(__Field::__field7),
                            "left_hand_right" => _serde::__private::Ok(__Field::__field8),
                            "right_foot_left" => _serde::__private::Ok(__Field::__field9),
                            "right_foot_right" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            "right_hand_back" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            "right_hand_left" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            "right_hand_right" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"chest_board" => _serde::__private::Ok(__Field::__field0),
                            b"head_front" => _serde::__private::Ok(__Field::__field1),
                            b"head_middle" => _serde::__private::Ok(__Field::__field2),
                            b"head_rear" => _serde::__private::Ok(__Field::__field3),
                            b"left_foot_left" => _serde::__private::Ok(__Field::__field4),
                            b"left_foot_right" => {
                                _serde::__private::Ok(__Field::__field5)
                            }
                            b"left_hand_back" => _serde::__private::Ok(__Field::__field6),
                            b"left_hand_left" => _serde::__private::Ok(__Field::__field7),
                            b"left_hand_right" => {
                                _serde::__private::Ok(__Field::__field8)
                            }
                            b"right_foot_left" => {
                                _serde::__private::Ok(__Field::__field9)
                            }
                            b"right_foot_right" => {
                                _serde::__private::Ok(__Field::__field10)
                            }
                            b"right_hand_back" => {
                                _serde::__private::Ok(__Field::__field11)
                            }
                            b"right_hand_left" => {
                                _serde::__private::Ok(__Field::__field12)
                            }
                            b"right_hand_right" => {
                                _serde::__private::Ok(__Field::__field13)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Touch>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Touch;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Touch",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field6 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        6usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field7 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        7usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field8 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        8usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field9 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        9usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field10 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        10usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field11 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        11usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field12 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        12usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        let __field13 = match match _serde::de::SeqAccess::next_element::<
                            f32,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        13usize,
                                        &"struct Touch with 14 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Touch {
                            chest_board: __field0,
                            head_front: __field1,
                            head_middle: __field2,
                            head_rear: __field3,
                            left_foot_left: __field4,
                            left_foot_right: __field5,
                            left_hand_back: __field6,
                            left_hand_left: __field7,
                            left_hand_right: __field8,
                            right_foot_left: __field9,
                            right_foot_right: __field10,
                            right_hand_back: __field11,
                            right_hand_left: __field12,
                            right_hand_right: __field13,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field6: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field7: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field8: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field9: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field10: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field11: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field12: _serde::__private::Option<f32> = _serde::__private::None;
                        let mut __field13: _serde::__private::Option<f32> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "chest_board",
                                            ),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "head_front",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "head_middle",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "head_rear",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_foot_left",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_foot_right",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field6 => {
                                    if _serde::__private::Option::is_some(&__field6) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_hand_back",
                                            ),
                                        );
                                    }
                                    __field6 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field7 => {
                                    if _serde::__private::Option::is_some(&__field7) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_hand_left",
                                            ),
                                        );
                                    }
                                    __field7 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field8 => {
                                    if _serde::__private::Option::is_some(&__field8) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "left_hand_right",
                                            ),
                                        );
                                    }
                                    __field8 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field9 => {
                                    if _serde::__private::Option::is_some(&__field9) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_foot_left",
                                            ),
                                        );
                                    }
                                    __field9 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field10 => {
                                    if _serde::__private::Option::is_some(&__field10) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_foot_right",
                                            ),
                                        );
                                    }
                                    __field10 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field11 => {
                                    if _serde::__private::Option::is_some(&__field11) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_hand_back",
                                            ),
                                        );
                                    }
                                    __field11 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field12 => {
                                    if _serde::__private::Option::is_some(&__field12) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_hand_left",
                                            ),
                                        );
                                    }
                                    __field12 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field13 => {
                                    if _serde::__private::Option::is_some(&__field13) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "right_hand_right",
                                            ),
                                        );
                                    }
                                    __field13 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<f32>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("chest_board") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("head_front") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("head_middle") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("head_rear") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_foot_left",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_foot_right",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field6 = match __field6 {
                            _serde::__private::Some(__field6) => __field6,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_hand_back",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field7 = match __field7 {
                            _serde::__private::Some(__field7) => __field7,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_hand_left",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field8 = match __field8 {
                            _serde::__private::Some(__field8) => __field8,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "left_hand_right",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field9 = match __field9 {
                            _serde::__private::Some(__field9) => __field9,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_foot_left",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field10 = match __field10 {
                            _serde::__private::Some(__field10) => __field10,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_foot_right",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field11 = match __field11 {
                            _serde::__private::Some(__field11) => __field11,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_hand_back",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field12 = match __field12 {
                            _serde::__private::Some(__field12) => __field12,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_hand_left",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field13 = match __field13 {
                            _serde::__private::Some(__field13) => __field13,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "right_hand_right",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Touch {
                            chest_board: __field0,
                            head_front: __field1,
                            head_middle: __field2,
                            head_rear: __field3,
                            left_foot_left: __field4,
                            left_foot_right: __field5,
                            left_hand_back: __field6,
                            left_hand_left: __field7,
                            left_hand_right: __field8,
                            right_foot_left: __field9,
                            right_foot_right: __field10,
                            right_hand_back: __field11,
                            right_hand_left: __field12,
                            right_hand_right: __field13,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &[
                    "chest_board",
                    "head_front",
                    "head_middle",
                    "head_rear",
                    "left_foot_left",
                    "left_foot_right",
                    "left_hand_back",
                    "left_hand_left",
                    "left_hand_right",
                    "right_foot_left",
                    "right_foot_right",
                    "right_hand_back",
                    "right_hand_left",
                    "right_hand_right",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Touch",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Touch>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::clone::Clone for Touch {
        #[inline]
        fn clone(&self) -> Touch {
            Touch {
                chest_board: ::core::clone::Clone::clone(&self.chest_board),
                head_front: ::core::clone::Clone::clone(&self.head_front),
                head_middle: ::core::clone::Clone::clone(&self.head_middle),
                head_rear: ::core::clone::Clone::clone(&self.head_rear),
                left_foot_left: ::core::clone::Clone::clone(&self.left_foot_left),
                left_foot_right: ::core::clone::Clone::clone(&self.left_foot_right),
                left_hand_back: ::core::clone::Clone::clone(&self.left_hand_back),
                left_hand_left: ::core::clone::Clone::clone(&self.left_hand_left),
                left_hand_right: ::core::clone::Clone::clone(&self.left_hand_right),
                right_foot_left: ::core::clone::Clone::clone(&self.right_foot_left),
                right_foot_right: ::core::clone::Clone::clone(&self.right_foot_right),
                right_hand_back: ::core::clone::Clone::clone(&self.right_hand_back),
                right_hand_left: ::core::clone::Clone::clone(&self.right_hand_left),
                right_hand_right: ::core::clone::Clone::clone(&self.right_hand_right),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Touch {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "chest_board",
                "head_front",
                "head_middle",
                "head_rear",
                "left_foot_left",
                "left_foot_right",
                "left_hand_back",
                "left_hand_left",
                "left_hand_right",
                "right_foot_left",
                "right_foot_right",
                "right_hand_back",
                "right_hand_left",
                "right_hand_right",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.chest_board,
                &self.head_front,
                &self.head_middle,
                &self.head_rear,
                &self.left_foot_left,
                &self.left_foot_right,
                &self.left_hand_back,
                &self.left_hand_left,
                &self.left_hand_right,
                &self.right_foot_left,
                &self.right_foot_right,
                &self.right_hand_back,
                &self.right_hand_left,
                &&self.right_hand_right,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(f, "Touch", names, values)
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for Touch {
        #[inline]
        fn default() -> Touch {
            Touch {
                chest_board: ::core::default::Default::default(),
                head_front: ::core::default::Default::default(),
                head_middle: ::core::default::Default::default(),
                head_rear: ::core::default::Default::default(),
                left_foot_left: ::core::default::Default::default(),
                left_foot_right: ::core::default::Default::default(),
                left_hand_back: ::core::default::Default::default(),
                left_hand_left: ::core::default::Default::default(),
                left_hand_right: ::core::default::Default::default(),
                right_foot_left: ::core::default::Default::default(),
                right_foot_right: ::core::default::Default::default(),
                right_hand_back: ::core::default::Default::default(),
                right_hand_left: ::core::default::Default::default(),
                right_hand_right: ::core::default::Default::default(),
            }
        }
    }
    /// Wrapper struct containing the head joints of the robot.
    pub struct HeadJoints<T> {
        pub yaw: T,
        pub pitch: T,
    }
    ///Builder struct for [`HeadJoints`].
    #[must_use]
    pub struct HeadJointsBuilder<T> {
        yaw: Option<T>,
        pitch: Option<T>,
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for HeadJointsBuilder<T> {
        #[inline]
        fn default() -> HeadJointsBuilder<T> {
            HeadJointsBuilder {
                yaw: ::core::default::Default::default(),
                pitch: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Default> HeadJointsBuilder<T> {
        ///Set the `yaw` value to the provided value.
        pub fn yaw(mut self, yaw: T) -> Self {
            self.yaw = Some(yaw);
            self
        }
        ///Set the `pitch` value to the provided value.
        pub fn pitch(mut self, pitch: T) -> Self {
            self.pitch = Some(pitch);
            self
        }
        /**Use the provided values to build a new instance of [`HeadJoints`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> HeadJoints<T> {
            HeadJoints {
                yaw: self.yaw.unwrap_or_default(),
                pitch: self.pitch.unwrap_or_default(),
            }
        }
    }
    impl<T: Default> HeadJoints<T> {
        pub fn builder() -> HeadJointsBuilder<T> {
            HeadJointsBuilder::<T>::default()
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for HeadJoints<T> {
        #[inline]
        fn clone(&self) -> HeadJoints<T> {
            HeadJoints {
                yaw: ::core::clone::Clone::clone(&self.yaw),
                pitch: ::core::clone::Clone::clone(&self.pitch),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for HeadJoints<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "HeadJoints",
                "yaw",
                &self.yaw,
                "pitch",
                &&self.pitch,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for HeadJoints<T> {
        #[inline]
        fn default() -> HeadJoints<T> {
            HeadJoints {
                yaw: ::core::default::Default::default(),
                pitch: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Clone> HeadJoints<T> {
        pub fn to_vec(&self) -> std::vec::Vec<T> {
            <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([self.yaw.clone(), self.pitch.clone()]),
            )
        }
    }
    impl<T: Clone> std::iter::IntoIterator for HeadJoints<T> {
        type Item = T;
        type IntoIter = std::vec::IntoIter<Self::Item>;
        fn into_iter(self) -> std::vec::IntoIter<T> {
            <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([self.yaw.clone(), self.pitch.clone()]),
                )
                .into_iter()
        }
    }
    impl<T> FromIterator<T> for HeadJoints<T> {
        fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
            let t: [T; 2usize];
            let mut i = 0;
            for item in iter {
                t[i] = item;
                i += 1;
            }
            let [yaw, pitch] = t;
            Self { yaw, pitch }
        }
    }
    impl<T: Clone> FillExt<T> for HeadJoints<T> {
        fn fill(value: T) -> HeadJoints<T> {
            HeadJoints {
                yaw: value.clone(),
                pitch: value.clone(),
            }
        }
    }
    /// Wrapper struct containing the left leg joints of the robot.
    pub struct LeftLegJoints<T> {
        pub hip_yaw_pitch: T,
        pub hip_roll: T,
        pub hip_pitch: T,
        pub knee_pitch: T,
        pub ankle_pitch: T,
        pub ankle_roll: T,
    }
    ///Builder struct for [`LeftLegJoints`].
    #[must_use]
    pub struct LeftLegJointsBuilder<T> {
        hip_yaw_pitch: Option<T>,
        hip_roll: Option<T>,
        hip_pitch: Option<T>,
        knee_pitch: Option<T>,
        ankle_pitch: Option<T>,
        ankle_roll: Option<T>,
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default
    for LeftLegJointsBuilder<T> {
        #[inline]
        fn default() -> LeftLegJointsBuilder<T> {
            LeftLegJointsBuilder {
                hip_yaw_pitch: ::core::default::Default::default(),
                hip_roll: ::core::default::Default::default(),
                hip_pitch: ::core::default::Default::default(),
                knee_pitch: ::core::default::Default::default(),
                ankle_pitch: ::core::default::Default::default(),
                ankle_roll: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Default> LeftLegJointsBuilder<T> {
        ///Set the `hip_yaw_pitch` value to the provided value.
        pub fn hip_yaw_pitch(mut self, hip_yaw_pitch: T) -> Self {
            self.hip_yaw_pitch = Some(hip_yaw_pitch);
            self
        }
        ///Set the `hip_roll` value to the provided value.
        pub fn hip_roll(mut self, hip_roll: T) -> Self {
            self.hip_roll = Some(hip_roll);
            self
        }
        ///Set the `hip_pitch` value to the provided value.
        pub fn hip_pitch(mut self, hip_pitch: T) -> Self {
            self.hip_pitch = Some(hip_pitch);
            self
        }
        ///Set the `knee_pitch` value to the provided value.
        pub fn knee_pitch(mut self, knee_pitch: T) -> Self {
            self.knee_pitch = Some(knee_pitch);
            self
        }
        ///Set the `ankle_pitch` value to the provided value.
        pub fn ankle_pitch(mut self, ankle_pitch: T) -> Self {
            self.ankle_pitch = Some(ankle_pitch);
            self
        }
        ///Set the `ankle_roll` value to the provided value.
        pub fn ankle_roll(mut self, ankle_roll: T) -> Self {
            self.ankle_roll = Some(ankle_roll);
            self
        }
        /**Use the provided values to build a new instance of [`LeftLegJoints`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> LeftLegJoints<T> {
            LeftLegJoints {
                hip_yaw_pitch: self.hip_yaw_pitch.unwrap_or_default(),
                hip_roll: self.hip_roll.unwrap_or_default(),
                hip_pitch: self.hip_pitch.unwrap_or_default(),
                knee_pitch: self.knee_pitch.unwrap_or_default(),
                ankle_pitch: self.ankle_pitch.unwrap_or_default(),
                ankle_roll: self.ankle_roll.unwrap_or_default(),
            }
        }
    }
    impl<T: Default> LeftLegJoints<T> {
        pub fn builder() -> LeftLegJointsBuilder<T> {
            LeftLegJointsBuilder::<T>::default()
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for LeftLegJoints<T> {
        #[inline]
        fn clone(&self) -> LeftLegJoints<T> {
            LeftLegJoints {
                hip_yaw_pitch: ::core::clone::Clone::clone(&self.hip_yaw_pitch),
                hip_roll: ::core::clone::Clone::clone(&self.hip_roll),
                hip_pitch: ::core::clone::Clone::clone(&self.hip_pitch),
                knee_pitch: ::core::clone::Clone::clone(&self.knee_pitch),
                ankle_pitch: ::core::clone::Clone::clone(&self.ankle_pitch),
                ankle_roll: ::core::clone::Clone::clone(&self.ankle_roll),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for LeftLegJoints<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "hip_yaw_pitch",
                "hip_roll",
                "hip_pitch",
                "knee_pitch",
                "ankle_pitch",
                "ankle_roll",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.hip_yaw_pitch,
                &self.hip_roll,
                &self.hip_pitch,
                &self.knee_pitch,
                &self.ankle_pitch,
                &&self.ankle_roll,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "LeftLegJoints",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for LeftLegJoints<T> {
        #[inline]
        fn default() -> LeftLegJoints<T> {
            LeftLegJoints {
                hip_yaw_pitch: ::core::default::Default::default(),
                hip_roll: ::core::default::Default::default(),
                hip_pitch: ::core::default::Default::default(),
                knee_pitch: ::core::default::Default::default(),
                ankle_pitch: ::core::default::Default::default(),
                ankle_roll: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Clone> LeftLegJoints<T> {
        pub fn to_vec(&self) -> std::vec::Vec<T> {
            <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    self.hip_yaw_pitch.clone(),
                    self.hip_roll.clone(),
                    self.hip_pitch.clone(),
                    self.knee_pitch.clone(),
                    self.ankle_pitch.clone(),
                    self.ankle_roll.clone(),
                ]),
            )
        }
    }
    impl<T: Clone> std::iter::IntoIterator for LeftLegJoints<T> {
        type Item = T;
        type IntoIter = std::vec::IntoIter<Self::Item>;
        fn into_iter(self) -> std::vec::IntoIter<T> {
            <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        self.hip_yaw_pitch.clone(),
                        self.hip_roll.clone(),
                        self.hip_pitch.clone(),
                        self.knee_pitch.clone(),
                        self.ankle_pitch.clone(),
                        self.ankle_roll.clone(),
                    ]),
                )
                .into_iter()
        }
    }
    impl<T> FromIterator<T> for LeftLegJoints<T> {
        fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
            let t: [T; 6usize];
            let mut i = 0;
            for item in iter {
                t[i] = item;
                i += 1;
            }
            let [hip_yaw_pitch, hip_roll, hip_pitch, knee_pitch, ankle_pitch, ankle_roll,
            ] = t;
            Self {
                hip_yaw_pitch,
                hip_roll,
                hip_pitch,
                knee_pitch,
                ankle_pitch,
                ankle_roll,
            }
        }
    }
    impl<T: Clone> FillExt<T> for LeftLegJoints<T> {
        fn fill(value: T) -> LeftLegJoints<T> {
            LeftLegJoints {
                hip_yaw_pitch: value.clone(),
                hip_roll: value.clone(),
                hip_pitch: value.clone(),
                knee_pitch: value.clone(),
                ankle_pitch: value.clone(),
                ankle_roll: value.clone(),
            }
        }
    }
    /// Wrapper struct containing right left leg joints of the robot.
    pub struct RightLegJoints<T> {
        pub hip_roll: T,
        pub hip_pitch: T,
        pub knee_pitch: T,
        pub ankle_pitch: T,
        pub ankle_roll: T,
    }
    ///Builder struct for [`RightLegJoints`].
    #[must_use]
    pub struct RightLegJointsBuilder<T> {
        hip_roll: Option<T>,
        hip_pitch: Option<T>,
        knee_pitch: Option<T>,
        ankle_pitch: Option<T>,
        ankle_roll: Option<T>,
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default
    for RightLegJointsBuilder<T> {
        #[inline]
        fn default() -> RightLegJointsBuilder<T> {
            RightLegJointsBuilder {
                hip_roll: ::core::default::Default::default(),
                hip_pitch: ::core::default::Default::default(),
                knee_pitch: ::core::default::Default::default(),
                ankle_pitch: ::core::default::Default::default(),
                ankle_roll: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Default> RightLegJointsBuilder<T> {
        ///Set the `hip_roll` value to the provided value.
        pub fn hip_roll(mut self, hip_roll: T) -> Self {
            self.hip_roll = Some(hip_roll);
            self
        }
        ///Set the `hip_pitch` value to the provided value.
        pub fn hip_pitch(mut self, hip_pitch: T) -> Self {
            self.hip_pitch = Some(hip_pitch);
            self
        }
        ///Set the `knee_pitch` value to the provided value.
        pub fn knee_pitch(mut self, knee_pitch: T) -> Self {
            self.knee_pitch = Some(knee_pitch);
            self
        }
        ///Set the `ankle_pitch` value to the provided value.
        pub fn ankle_pitch(mut self, ankle_pitch: T) -> Self {
            self.ankle_pitch = Some(ankle_pitch);
            self
        }
        ///Set the `ankle_roll` value to the provided value.
        pub fn ankle_roll(mut self, ankle_roll: T) -> Self {
            self.ankle_roll = Some(ankle_roll);
            self
        }
        /**Use the provided values to build a new instance of [`RightLegJoints`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> RightLegJoints<T> {
            RightLegJoints {
                hip_roll: self.hip_roll.unwrap_or_default(),
                hip_pitch: self.hip_pitch.unwrap_or_default(),
                knee_pitch: self.knee_pitch.unwrap_or_default(),
                ankle_pitch: self.ankle_pitch.unwrap_or_default(),
                ankle_roll: self.ankle_roll.unwrap_or_default(),
            }
        }
    }
    impl<T: Default> RightLegJoints<T> {
        pub fn builder() -> RightLegJointsBuilder<T> {
            RightLegJointsBuilder::<T>::default()
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for RightLegJoints<T> {
        #[inline]
        fn clone(&self) -> RightLegJoints<T> {
            RightLegJoints {
                hip_roll: ::core::clone::Clone::clone(&self.hip_roll),
                hip_pitch: ::core::clone::Clone::clone(&self.hip_pitch),
                knee_pitch: ::core::clone::Clone::clone(&self.knee_pitch),
                ankle_pitch: ::core::clone::Clone::clone(&self.ankle_pitch),
                ankle_roll: ::core::clone::Clone::clone(&self.ankle_roll),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for RightLegJoints<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field5_finish(
                f,
                "RightLegJoints",
                "hip_roll",
                &self.hip_roll,
                "hip_pitch",
                &self.hip_pitch,
                "knee_pitch",
                &self.knee_pitch,
                "ankle_pitch",
                &self.ankle_pitch,
                "ankle_roll",
                &&self.ankle_roll,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for RightLegJoints<T> {
        #[inline]
        fn default() -> RightLegJoints<T> {
            RightLegJoints {
                hip_roll: ::core::default::Default::default(),
                hip_pitch: ::core::default::Default::default(),
                knee_pitch: ::core::default::Default::default(),
                ankle_pitch: ::core::default::Default::default(),
                ankle_roll: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Clone> RightLegJoints<T> {
        pub fn to_vec(&self) -> std::vec::Vec<T> {
            <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    self.hip_roll.clone(),
                    self.hip_pitch.clone(),
                    self.knee_pitch.clone(),
                    self.ankle_pitch.clone(),
                    self.ankle_roll.clone(),
                ]),
            )
        }
    }
    impl<T: Clone> std::iter::IntoIterator for RightLegJoints<T> {
        type Item = T;
        type IntoIter = std::vec::IntoIter<Self::Item>;
        fn into_iter(self) -> std::vec::IntoIter<T> {
            <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        self.hip_roll.clone(),
                        self.hip_pitch.clone(),
                        self.knee_pitch.clone(),
                        self.ankle_pitch.clone(),
                        self.ankle_roll.clone(),
                    ]),
                )
                .into_iter()
        }
    }
    impl<T> FromIterator<T> for RightLegJoints<T> {
        fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
            let t: [T; 5usize];
            let mut i = 0;
            for item in iter {
                t[i] = item;
                i += 1;
            }
            let [hip_roll, hip_pitch, knee_pitch, ankle_pitch, ankle_roll] = t;
            Self {
                hip_roll,
                hip_pitch,
                knee_pitch,
                ankle_pitch,
                ankle_roll,
            }
        }
    }
    impl<T: Clone> FillExt<T> for RightLegJoints<T> {
        fn fill(value: T) -> RightLegJoints<T> {
            RightLegJoints {
                hip_roll: value.clone(),
                hip_pitch: value.clone(),
                knee_pitch: value.clone(),
                ankle_pitch: value.clone(),
                ankle_roll: value.clone(),
            }
        }
    }
    /// Wrapper struct containing joint values for both legs of the robot.
    pub struct LegJoints<T> {
        pub left_leg: LeftLegJoints<T>,
        pub right_leg: RightLegJoints<T>,
    }
    ///Builder struct for [`LegJoints`].
    #[must_use]
    pub struct LegJointsBuilder<T> {
        left_leg: Option<LeftLegJoints<T>>,
        right_leg: Option<RightLegJoints<T>>,
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for LegJointsBuilder<T> {
        #[inline]
        fn default() -> LegJointsBuilder<T> {
            LegJointsBuilder {
                left_leg: ::core::default::Default::default(),
                right_leg: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Default> LegJointsBuilder<T> {
        ///Set the `left_leg` value to the provided value.
        pub fn left_leg(mut self, left_leg: LeftLegJoints<T>) -> Self {
            self.left_leg = Some(left_leg);
            self
        }
        ///Set the `right_leg` value to the provided value.
        pub fn right_leg(mut self, right_leg: RightLegJoints<T>) -> Self {
            self.right_leg = Some(right_leg);
            self
        }
        /**Use the provided values to build a new instance of [`LegJoints`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> LegJoints<T> {
            LegJoints {
                left_leg: self.left_leg.unwrap_or_default(),
                right_leg: self.right_leg.unwrap_or_default(),
            }
        }
    }
    impl<T: Default> LegJoints<T> {
        pub fn builder() -> LegJointsBuilder<T> {
            LegJointsBuilder::<T>::default()
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for LegJoints<T> {
        #[inline]
        fn clone(&self) -> LegJoints<T> {
            LegJoints {
                left_leg: ::core::clone::Clone::clone(&self.left_leg),
                right_leg: ::core::clone::Clone::clone(&self.right_leg),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for LegJoints<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "LegJoints",
                "left_leg",
                &self.left_leg,
                "right_leg",
                &&self.right_leg,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for LegJoints<T> {
        #[inline]
        fn default() -> LegJoints<T> {
            LegJoints {
                left_leg: ::core::default::Default::default(),
                right_leg: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Clone> FillExt<T> for LegJoints<T> {
        fn fill(value: T) -> LegJoints<T> {
            LegJoints {
                left_leg: LeftLegJoints::fill(value.clone()),
                right_leg: RightLegJoints::fill(value.clone()),
            }
        }
    }
    /// Wrapper struct containing the joints for a single arm of the robot.
    pub struct SingleArmJoints<T> {
        pub shoulder_pitch: T,
        pub shoulder_roll: T,
        pub elbow_yaw: T,
        pub elbow_roll: T,
        pub wrist_yaw: T,
        pub hand: T,
    }
    ///Builder struct for [`SingleArmJoints`].
    #[must_use]
    pub struct SingleArmJointsBuilder<T> {
        shoulder_pitch: Option<T>,
        shoulder_roll: Option<T>,
        elbow_yaw: Option<T>,
        elbow_roll: Option<T>,
        wrist_yaw: Option<T>,
        hand: Option<T>,
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default
    for SingleArmJointsBuilder<T> {
        #[inline]
        fn default() -> SingleArmJointsBuilder<T> {
            SingleArmJointsBuilder {
                shoulder_pitch: ::core::default::Default::default(),
                shoulder_roll: ::core::default::Default::default(),
                elbow_yaw: ::core::default::Default::default(),
                elbow_roll: ::core::default::Default::default(),
                wrist_yaw: ::core::default::Default::default(),
                hand: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Default> SingleArmJointsBuilder<T> {
        ///Set the `shoulder_pitch` value to the provided value.
        pub fn shoulder_pitch(mut self, shoulder_pitch: T) -> Self {
            self.shoulder_pitch = Some(shoulder_pitch);
            self
        }
        ///Set the `shoulder_roll` value to the provided value.
        pub fn shoulder_roll(mut self, shoulder_roll: T) -> Self {
            self.shoulder_roll = Some(shoulder_roll);
            self
        }
        ///Set the `elbow_yaw` value to the provided value.
        pub fn elbow_yaw(mut self, elbow_yaw: T) -> Self {
            self.elbow_yaw = Some(elbow_yaw);
            self
        }
        ///Set the `elbow_roll` value to the provided value.
        pub fn elbow_roll(mut self, elbow_roll: T) -> Self {
            self.elbow_roll = Some(elbow_roll);
            self
        }
        ///Set the `wrist_yaw` value to the provided value.
        pub fn wrist_yaw(mut self, wrist_yaw: T) -> Self {
            self.wrist_yaw = Some(wrist_yaw);
            self
        }
        ///Set the `hand` value to the provided value.
        pub fn hand(mut self, hand: T) -> Self {
            self.hand = Some(hand);
            self
        }
        /**Use the provided values to build a new instance of [`SingleArmJoints`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> SingleArmJoints<T> {
            SingleArmJoints {
                shoulder_pitch: self.shoulder_pitch.unwrap_or_default(),
                shoulder_roll: self.shoulder_roll.unwrap_or_default(),
                elbow_yaw: self.elbow_yaw.unwrap_or_default(),
                elbow_roll: self.elbow_roll.unwrap_or_default(),
                wrist_yaw: self.wrist_yaw.unwrap_or_default(),
                hand: self.hand.unwrap_or_default(),
            }
        }
    }
    impl<T: Default> SingleArmJoints<T> {
        pub fn builder() -> SingleArmJointsBuilder<T> {
            SingleArmJointsBuilder::<T>::default()
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for SingleArmJoints<T> {
        #[inline]
        fn clone(&self) -> SingleArmJoints<T> {
            SingleArmJoints {
                shoulder_pitch: ::core::clone::Clone::clone(&self.shoulder_pitch),
                shoulder_roll: ::core::clone::Clone::clone(&self.shoulder_roll),
                elbow_yaw: ::core::clone::Clone::clone(&self.elbow_yaw),
                elbow_roll: ::core::clone::Clone::clone(&self.elbow_roll),
                wrist_yaw: ::core::clone::Clone::clone(&self.wrist_yaw),
                hand: ::core::clone::Clone::clone(&self.hand),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for SingleArmJoints<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "shoulder_pitch",
                "shoulder_roll",
                "elbow_yaw",
                "elbow_roll",
                "wrist_yaw",
                "hand",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.shoulder_pitch,
                &self.shoulder_roll,
                &self.elbow_yaw,
                &self.elbow_roll,
                &self.wrist_yaw,
                &&self.hand,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "SingleArmJoints",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for SingleArmJoints<T> {
        #[inline]
        fn default() -> SingleArmJoints<T> {
            SingleArmJoints {
                shoulder_pitch: ::core::default::Default::default(),
                shoulder_roll: ::core::default::Default::default(),
                elbow_yaw: ::core::default::Default::default(),
                elbow_roll: ::core::default::Default::default(),
                wrist_yaw: ::core::default::Default::default(),
                hand: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Clone> SingleArmJoints<T> {
        pub fn to_vec(&self) -> std::vec::Vec<T> {
            <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    self.shoulder_pitch.clone(),
                    self.shoulder_roll.clone(),
                    self.elbow_yaw.clone(),
                    self.elbow_roll.clone(),
                    self.wrist_yaw.clone(),
                    self.hand.clone(),
                ]),
            )
        }
    }
    impl<T: Clone> std::iter::IntoIterator for SingleArmJoints<T> {
        type Item = T;
        type IntoIter = std::vec::IntoIter<Self::Item>;
        fn into_iter(self) -> std::vec::IntoIter<T> {
            <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        self.shoulder_pitch.clone(),
                        self.shoulder_roll.clone(),
                        self.elbow_yaw.clone(),
                        self.elbow_roll.clone(),
                        self.wrist_yaw.clone(),
                        self.hand.clone(),
                    ]),
                )
                .into_iter()
        }
    }
    impl<T> FromIterator<T> for SingleArmJoints<T> {
        fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
            let t: [T; 6usize];
            let mut i = 0;
            for item in iter {
                t[i] = item;
                i += 1;
            }
            let [shoulder_pitch, shoulder_roll, elbow_yaw, elbow_roll, wrist_yaw, hand,
            ] = t;
            Self {
                shoulder_pitch,
                shoulder_roll,
                elbow_yaw,
                elbow_roll,
                wrist_yaw,
                hand,
            }
        }
    }
    impl<T: Clone> FillExt<T> for SingleArmJoints<T> {
        fn fill(value: T) -> SingleArmJoints<T> {
            SingleArmJoints {
                shoulder_pitch: value.clone(),
                shoulder_roll: value.clone(),
                elbow_yaw: value.clone(),
                elbow_roll: value.clone(),
                wrist_yaw: value.clone(),
                hand: value.clone(),
            }
        }
    }
    /// Type definition for the left arm joints of the robot.
    /// Introduced for api consistenty with [`LeftLegJoints`].
    pub type LeftArmJoints<T> = SingleArmJoints<T>;
    /// Type definition for the right arm joints of the robot.
    /// Introduced for api consistenty with [`RightLegJoints`].
    pub type RightArmJoints<T> = SingleArmJoints<T>;
    /// Wrapper struct containing the arm joints of the robot.
    pub struct ArmJoints<T> {
        pub left_arm: SingleArmJoints<T>,
        pub right_arm: SingleArmJoints<T>,
    }
    ///Builder struct for [`ArmJoints`].
    #[must_use]
    pub struct ArmJointsBuilder<T> {
        left_arm: Option<SingleArmJoints<T>>,
        right_arm: Option<SingleArmJoints<T>>,
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for ArmJointsBuilder<T> {
        #[inline]
        fn default() -> ArmJointsBuilder<T> {
            ArmJointsBuilder {
                left_arm: ::core::default::Default::default(),
                right_arm: ::core::default::Default::default(),
            }
        }
    }
    impl<T: Default> ArmJointsBuilder<T> {
        ///Set the `left_arm` value to the provided value.
        pub fn left_arm(mut self, left_arm: SingleArmJoints<T>) -> Self {
            self.left_arm = Some(left_arm);
            self
        }
        ///Set the `right_arm` value to the provided value.
        pub fn right_arm(mut self, right_arm: SingleArmJoints<T>) -> Self {
            self.right_arm = Some(right_arm);
            self
        }
        /**Use the provided values to build a new instance of [`ArmJoints`].

Not explicitly defined fields will use their [`Default`] value. */
        pub fn build(self) -> ArmJoints<T> {
            ArmJoints {
                left_arm: self.left_arm.unwrap_or_default(),
                right_arm: self.right_arm.unwrap_or_default(),
            }
        }
    }
    impl<T: Default> ArmJoints<T> {
        pub fn builder() -> ArmJointsBuilder<T> {
            ArmJointsBuilder::<T>::default()
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone> ::core::clone::Clone for ArmJoints<T> {
        #[inline]
        fn clone(&self) -> ArmJoints<T> {
            ArmJoints {
                left_arm: ::core::clone::Clone::clone(&self.left_arm),
                right_arm: ::core::clone::Clone::clone(&self.right_arm),
            }
        }
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug> ::core::fmt::Debug for ArmJoints<T> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "ArmJoints",
                "left_arm",
                &self.left_arm,
                "right_arm",
                &&self.right_arm,
            )
        }
    }
    #[automatically_derived]
    impl<T: ::core::default::Default> ::core::default::Default for ArmJoints<T> {
        #[inline]
        fn default() -> ArmJoints<T> {
            ArmJoints {
                left_arm: ::core::default::Default::default(),
                right_arm: ::core::default::Default::default(),
            }
        }
    }
    impl<T> JointArrayBuilder<T> {
        /// Set all the joint values to the corresponding values from the provided [`JointArray`].
        pub fn from_joint_array(mut self, joints: JointArray<T>) {
            self.head_pitch = Some(joints.head_pitch);
            self.head_yaw = Some(joints.head_yaw);
            self.left_hip_yaw_pitch = Some(joints.left_hip_yaw_pitch);
            self.left_hip_roll = Some(joints.left_hip_roll);
            self.left_hip_pitch = Some(joints.left_hip_pitch);
            self.left_knee_pitch = Some(joints.left_knee_pitch);
            self.left_ankle_pitch = Some(joints.left_ankle_pitch);
            self.left_ankle_roll = Some(joints.left_ankle_roll);
            self.right_hip_roll = Some(joints.right_hip_roll);
            self.right_hip_pitch = Some(joints.right_hip_pitch);
            self.right_knee_pitch = Some(joints.right_knee_pitch);
            self.right_ankle_pitch = Some(joints.right_ankle_pitch);
            self.right_ankle_roll = Some(joints.right_ankle_roll);
            self.left_shoulder_pitch = Some(joints.left_shoulder_pitch);
            self.left_shoulder_roll = Some(joints.left_shoulder_roll);
            self.left_elbow_yaw = Some(joints.left_elbow_yaw);
            self.left_elbow_roll = Some(joints.left_elbow_roll);
            self.left_wrist_yaw = Some(joints.left_wrist_yaw);
            self.left_hand = Some(joints.left_hand);
            self.right_shoulder_pitch = Some(joints.right_shoulder_pitch);
            self.right_shoulder_roll = Some(joints.right_shoulder_roll);
            self.right_elbow_yaw = Some(joints.right_elbow_yaw);
            self.right_elbow_roll = Some(joints.right_elbow_roll);
            self.right_wrist_yaw = Some(joints.right_wrist_yaw);
            self.right_hand = Some(joints.right_hand);
        }
        /// Set the `head_pitch` and `head_yaw` values to the corresponding values from the provided [`HeadJoints`].
        pub fn head_joints(mut self, joints: HeadJoints<T>) -> Self {
            self.head_pitch = Some(joints.pitch);
            self.head_yaw = Some(joints.yaw);
            self
        }
        /// Set the values for the left leg joints to the corresponding values from the provided [`LeftLegJoints`].
        pub fn left_leg_joints(mut self, joints: LeftLegJoints<T>) -> Self {
            self.left_hip_yaw_pitch = Some(joints.hip_yaw_pitch);
            self.left_hip_roll = Some(joints.hip_roll);
            self.left_hip_pitch = Some(joints.hip_pitch);
            self.left_knee_pitch = Some(joints.knee_pitch);
            self.left_ankle_pitch = Some(joints.ankle_pitch);
            self.left_ankle_roll = Some(joints.ankle_roll);
            self
        }
        /// Set the values for the right leg joints to the corresponding values from the provided [`RightLegJoints`].
        pub fn right_leg_joints(mut self, joints: RightLegJoints<T>) -> Self {
            self.right_hip_roll = Some(joints.hip_roll);
            self.right_hip_pitch = Some(joints.hip_pitch);
            self.right_knee_pitch = Some(joints.knee_pitch);
            self.right_ankle_pitch = Some(joints.ankle_pitch);
            self.right_ankle_roll = Some(joints.ankle_roll);
            self
        }
        /// Set the values for the leg joints to the corresponding values from the provided [`LegJoints`].
        pub fn leg_joints(mut self, joints: LegJoints<T>) -> Self {
            self.left_hip_yaw_pitch = Some(joints.left_leg.hip_yaw_pitch);
            self.left_hip_roll = Some(joints.left_leg.hip_roll);
            self.left_hip_pitch = Some(joints.left_leg.hip_pitch);
            self.left_knee_pitch = Some(joints.left_leg.knee_pitch);
            self.left_ankle_pitch = Some(joints.left_leg.ankle_pitch);
            self.left_ankle_roll = Some(joints.left_leg.ankle_roll);
            self.right_hip_roll = Some(joints.right_leg.hip_roll);
            self.right_hip_pitch = Some(joints.right_leg.hip_pitch);
            self.right_ankle_pitch = Some(joints.right_leg.ankle_pitch);
            self.right_knee_pitch = Some(joints.right_leg.knee_pitch);
            self.right_ankle_roll = Some(joints.right_leg.ankle_roll);
            self
        }
        /// Set the values for the left arm joints to the corresponding values from the provided [`LeftArmJoints`].
        pub fn left_arm_joints(mut self, joints: LeftArmJoints<T>) -> Self {
            self.left_shoulder_pitch = Some(joints.shoulder_pitch);
            self.left_shoulder_roll = Some(joints.shoulder_roll);
            self.left_elbow_yaw = Some(joints.elbow_yaw);
            self.left_elbow_roll = Some(joints.elbow_roll);
            self.left_wrist_yaw = Some(joints.wrist_yaw);
            self.left_hand = Some(joints.hand);
            self
        }
        /// Set the values for the right arm joints to the corresponding values from the provided [`RightArmJoints`].
        pub fn right_arm_joints(mut self, joints: RightArmJoints<T>) -> Self {
            self.right_shoulder_pitch = Some(joints.shoulder_pitch);
            self.right_shoulder_roll = Some(joints.shoulder_roll);
            self.right_elbow_yaw = Some(joints.elbow_yaw);
            self.right_elbow_roll = Some(joints.elbow_roll);
            self.right_wrist_yaw = Some(joints.wrist_yaw);
            self.right_hand = Some(joints.hand);
            self
        }
        /// Set the values for the arm joints to the corresponding values from the provided [`ArmJoints`].
        pub fn arm_joints(mut self, joints: ArmJoints<T>) -> Self {
            self.left_shoulder_pitch = Some(joints.left_arm.shoulder_pitch);
            self.left_shoulder_roll = Some(joints.left_arm.shoulder_roll);
            self.left_elbow_yaw = Some(joints.left_arm.elbow_yaw);
            self.left_elbow_roll = Some(joints.left_arm.elbow_roll);
            self.left_wrist_yaw = Some(joints.left_arm.wrist_yaw);
            self.left_hand = Some(joints.left_arm.hand);
            self.right_shoulder_pitch = Some(joints.right_arm.shoulder_pitch);
            self.right_shoulder_roll = Some(joints.right_arm.shoulder_roll);
            self.right_elbow_yaw = Some(joints.right_arm.elbow_yaw);
            self.right_elbow_roll = Some(joints.right_arm.elbow_roll);
            self.right_wrist_yaw = Some(joints.right_arm.wrist_yaw);
            self.right_hand = Some(joints.right_arm.hand);
            self
        }
    }
}
pub use error::*;
use nidhogg_derive::Builder;
use serde::Serialize;
use types::{
    Battery, Color, ForceSensitiveResistors, JointArray, LeftEar, LeftEye, RightEar,
    RightEye, Skull, SonarEnabled, SonarValues, Touch, Vector2, Vector3,
};
/// Generic backend trait used for implementing a NAO interface.
pub trait NaoBackend: Sized {
    /// Connects to a NAO backend
    ///
    /// # Examples
    /// ```no_run
    /// use nidhogg::{NaoBackend, backend::LolaBackend};
    ///
    /// // We connect to a real NAO using the LoLA backend
    /// let mut nao = LolaBackend::connect().expect("Could not connect to the NAO! üò™");
    /// ```
    fn connect() -> Result<Self>;
    /// Converts a control message to the format required by the backend and writes it to that backend.
    ///
    /// # Examples
    /// ```no_run
    /// use nidhogg::{NaoBackend, NaoControlMessage, backend::LolaBackend, types::Color};
    ///
    /// let mut nao = LolaBackend::connect().unwrap();
    ///
    /// // First, create a new control message where we set the chest color
    /// let msg = NaoControlMessage::builder().chest(Color::MAGENTA).build();
    ///
    /// // Now we send it to the NAO!
    /// nao.send_control_msg(msg).expect("Failed to write control message to backend!");
    /// ```
    fn send_control_msg(&mut self, update: NaoControlMessage) -> Result<()>;
    /// Reads the current sensor data from the chosen backend
    ///
    /// # Examples
    /// ```no_run
    /// use nidhogg::{NaoBackend, backend::LolaBackend};
    ///
    /// let mut nao = LolaBackend::connect().unwrap();
    ///
    /// // Get the current state of the robot
    /// let state = nao.read_nao_state().expect("Failed to retrieve sensor data!");
    /// ```
    fn read_nao_state(&mut self) -> Result<NaoState>;
}
/// High level representation of the `LoLA` state message.
pub struct NaoState {
    pub position: JointArray<f32>,
    pub stiffness: JointArray<f32>,
    /// Accelerometer (Inertial Measurement Unit):
    ///
    /// The Accelerometer measures the proper acceleration along three axes (x, y, and z)
    /// in meters per second squared (m/s¬≤). The Z axis is facing up.
    ///
    /// Position relative to the torso frame: (-0.008, 0.00606, 0.027) in meters.
    pub accelerometer: Vector3<f32>,
    /// Gyroscope (Inertial Measurement Unit):
    ///
    /// The Gyroscope provides direct measurements of the rotational speed along
    /// three axes (x, y and z) in radians per second (rad/s). The Z axis is facing up.
    ///
    /// Position relative to the torso frame: (-0.008, 0.006, 0.029) in meters.
    pub gyroscope: Vector3<f32>,
    /// Angles:
    ///
    /// Using data from the Gyroscope and Accelerometer, the inertial board in the NAO robot calculates
    /// two inclination angles (x, y) of the robot's body.
    ///
    /// These angles represent the orientation of the robot and are measured in radians.
    pub angles: Vector2<f32>,
    pub sonar: SonarValues,
    pub force_sensitive_resistors: ForceSensitiveResistors,
    pub touch: Touch,
    pub battery: Battery,
    pub temperature: JointArray<f32>,
    pub current: JointArray<f32>,
    pub status: JointArray<i32>,
}
#[automatically_derived]
impl ::core::fmt::Debug for NaoState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "position",
            "stiffness",
            "accelerometer",
            "gyroscope",
            "angles",
            "sonar",
            "force_sensitive_resistors",
            "touch",
            "battery",
            "temperature",
            "current",
            "status",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.position,
            &self.stiffness,
            &self.accelerometer,
            &self.gyroscope,
            &self.angles,
            &self.sonar,
            &self.force_sensitive_resistors,
            &self.touch,
            &self.battery,
            &self.temperature,
            &self.current,
            &&self.status,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "NaoState", names, values)
    }
}
#[automatically_derived]
impl ::core::clone::Clone for NaoState {
    #[inline]
    fn clone(&self) -> NaoState {
        NaoState {
            position: ::core::clone::Clone::clone(&self.position),
            stiffness: ::core::clone::Clone::clone(&self.stiffness),
            accelerometer: ::core::clone::Clone::clone(&self.accelerometer),
            gyroscope: ::core::clone::Clone::clone(&self.gyroscope),
            angles: ::core::clone::Clone::clone(&self.angles),
            sonar: ::core::clone::Clone::clone(&self.sonar),
            force_sensitive_resistors: ::core::clone::Clone::clone(
                &self.force_sensitive_resistors,
            ),
            touch: ::core::clone::Clone::clone(&self.touch),
            battery: ::core::clone::Clone::clone(&self.battery),
            temperature: ::core::clone::Clone::clone(&self.temperature),
            current: ::core::clone::Clone::clone(&self.current),
            status: ::core::clone::Clone::clone(&self.status),
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for NaoState {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = match _serde::Serializer::serialize_struct(
                __serializer,
                "NaoState",
                false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "position",
                &self.position,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "stiffness",
                &self.stiffness,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "accelerometer",
                &self.accelerometer,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "gyroscope",
                &self.gyroscope,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "angles",
                &self.angles,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "sonar",
                &self.sonar,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "force_sensitive_resistors",
                &self.force_sensitive_resistors,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "touch",
                &self.touch,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "battery",
                &self.battery,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "temperature",
                &self.temperature,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "current",
                &self.current,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "status",
                &self.status,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
/// High level representation of the `LoLA` update message.
pub struct NaoControlMessage {
    pub position: JointArray<f32>,
    pub stiffness: JointArray<f32>,
    pub sonar: SonarEnabled,
    pub left_ear: LeftEar,
    pub right_ear: RightEar,
    pub chest: Color,
    pub left_eye: LeftEye,
    pub right_eye: RightEye,
    pub left_foot: Color,
    pub right_foot: Color,
    pub skull: Skull,
}
///Builder struct for [`NaoControlMessage`].
#[must_use]
pub struct NaoControlMessageBuilder {
    position: Option<JointArray<f32>>,
    stiffness: Option<JointArray<f32>>,
    sonar: Option<SonarEnabled>,
    left_ear: Option<LeftEar>,
    right_ear: Option<RightEar>,
    chest: Option<Color>,
    left_eye: Option<LeftEye>,
    right_eye: Option<RightEye>,
    left_foot: Option<Color>,
    right_foot: Option<Color>,
    skull: Option<Skull>,
}
#[automatically_derived]
impl ::core::default::Default for NaoControlMessageBuilder {
    #[inline]
    fn default() -> NaoControlMessageBuilder {
        NaoControlMessageBuilder {
            position: ::core::default::Default::default(),
            stiffness: ::core::default::Default::default(),
            sonar: ::core::default::Default::default(),
            left_ear: ::core::default::Default::default(),
            right_ear: ::core::default::Default::default(),
            chest: ::core::default::Default::default(),
            left_eye: ::core::default::Default::default(),
            right_eye: ::core::default::Default::default(),
            left_foot: ::core::default::Default::default(),
            right_foot: ::core::default::Default::default(),
            skull: ::core::default::Default::default(),
        }
    }
}
impl NaoControlMessageBuilder {
    ///Set the `position` value to the provided value.
    pub fn position(mut self, position: JointArray<f32>) -> Self {
        self.position = Some(position);
        self
    }
    ///Set the `stiffness` value to the provided value.
    pub fn stiffness(mut self, stiffness: JointArray<f32>) -> Self {
        self.stiffness = Some(stiffness);
        self
    }
    ///Set the `sonar` value to the provided value.
    pub fn sonar(mut self, sonar: SonarEnabled) -> Self {
        self.sonar = Some(sonar);
        self
    }
    ///Set the `left_ear` value to the provided value.
    pub fn left_ear(mut self, left_ear: LeftEar) -> Self {
        self.left_ear = Some(left_ear);
        self
    }
    ///Set the `right_ear` value to the provided value.
    pub fn right_ear(mut self, right_ear: RightEar) -> Self {
        self.right_ear = Some(right_ear);
        self
    }
    ///Set the `chest` value to the provided value.
    pub fn chest(mut self, chest: Color) -> Self {
        self.chest = Some(chest);
        self
    }
    ///Set the `left_eye` value to the provided value.
    pub fn left_eye(mut self, left_eye: LeftEye) -> Self {
        self.left_eye = Some(left_eye);
        self
    }
    ///Set the `right_eye` value to the provided value.
    pub fn right_eye(mut self, right_eye: RightEye) -> Self {
        self.right_eye = Some(right_eye);
        self
    }
    ///Set the `left_foot` value to the provided value.
    pub fn left_foot(mut self, left_foot: Color) -> Self {
        self.left_foot = Some(left_foot);
        self
    }
    ///Set the `right_foot` value to the provided value.
    pub fn right_foot(mut self, right_foot: Color) -> Self {
        self.right_foot = Some(right_foot);
        self
    }
    ///Set the `skull` value to the provided value.
    pub fn skull(mut self, skull: Skull) -> Self {
        self.skull = Some(skull);
        self
    }
    /**Use the provided values to build a new instance of [`NaoControlMessage`].

Not explicitly defined fields will use their [`Default`] value. */
    pub fn build(self) -> NaoControlMessage {
        NaoControlMessage {
            position: self.position.unwrap_or_default(),
            stiffness: self.stiffness.unwrap_or_default(),
            sonar: self.sonar.unwrap_or_default(),
            left_ear: self.left_ear.unwrap_or_default(),
            right_ear: self.right_ear.unwrap_or_default(),
            chest: self.chest.unwrap_or_default(),
            left_eye: self.left_eye.unwrap_or_default(),
            right_eye: self.right_eye.unwrap_or_default(),
            left_foot: self.left_foot.unwrap_or_default(),
            right_foot: self.right_foot.unwrap_or_default(),
            skull: self.skull.unwrap_or_default(),
        }
    }
}
impl NaoControlMessage {
    pub fn builder() -> NaoControlMessageBuilder {
        NaoControlMessageBuilder::default()
    }
}
#[automatically_derived]
impl ::core::clone::Clone for NaoControlMessage {
    #[inline]
    fn clone(&self) -> NaoControlMessage {
        NaoControlMessage {
            position: ::core::clone::Clone::clone(&self.position),
            stiffness: ::core::clone::Clone::clone(&self.stiffness),
            sonar: ::core::clone::Clone::clone(&self.sonar),
            left_ear: ::core::clone::Clone::clone(&self.left_ear),
            right_ear: ::core::clone::Clone::clone(&self.right_ear),
            chest: ::core::clone::Clone::clone(&self.chest),
            left_eye: ::core::clone::Clone::clone(&self.left_eye),
            right_eye: ::core::clone::Clone::clone(&self.right_eye),
            left_foot: ::core::clone::Clone::clone(&self.left_foot),
            right_foot: ::core::clone::Clone::clone(&self.right_foot),
            skull: ::core::clone::Clone::clone(&self.skull),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for NaoControlMessage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "position",
            "stiffness",
            "sonar",
            "left_ear",
            "right_ear",
            "chest",
            "left_eye",
            "right_eye",
            "left_foot",
            "right_foot",
            "skull",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.position,
            &self.stiffness,
            &self.sonar,
            &self.left_ear,
            &self.right_ear,
            &self.chest,
            &self.left_eye,
            &self.right_eye,
            &self.left_foot,
            &self.right_foot,
            &&self.skull,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "NaoControlMessage",
            names,
            values,
        )
    }
}
#[automatically_derived]
impl ::core::default::Default for NaoControlMessage {
    #[inline]
    fn default() -> NaoControlMessage {
        NaoControlMessage {
            position: ::core::default::Default::default(),
            stiffness: ::core::default::Default::default(),
            sonar: ::core::default::Default::default(),
            left_ear: ::core::default::Default::default(),
            right_ear: ::core::default::Default::default(),
            chest: ::core::default::Default::default(),
            left_eye: ::core::default::Default::default(),
            right_eye: ::core::default::Default::default(),
            left_foot: ::core::default::Default::default(),
            right_foot: ::core::default::Default::default(),
            skull: ::core::default::Default::default(),
        }
    }
}
/// Struct containing the hardware identifiers for the NAO V6 robot.
pub struct HardwareInfo {
    pub body_id: String,
    pub body_version: String,
    pub head_id: String,
    pub head_version: String,
}
#[automatically_derived]
impl ::core::fmt::Debug for HardwareInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field4_finish(
            f,
            "HardwareInfo",
            "body_id",
            &self.body_id,
            "body_version",
            &self.body_version,
            "head_id",
            &self.head_id,
            "head_version",
            &&self.head_version,
        )
    }
}
